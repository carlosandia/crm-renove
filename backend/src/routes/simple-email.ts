import express, { Request, Response } from 'express';
import nodemailer from 'nodemailer';
import { supabase } from '../config/supabase';
import { emailValidationService, SmtpConfig } from '../services/emailValidationService';

// AIDEV-NOTE: Autentica√ß√£o B√°sica Supabase - padr√£o oficial CLAUDE.md
// Removido import do middleware JWT - usando supabase.auth.getUser() diretamente

const router = express.Router();

/**
 * ‚úÖ VERS√ÉO ULTRA SIMPLES DO ENVIO DE EMAIL
 * - Remove todas as complexidades e fallbacks
 * - Timeout padr√£o do nodemailer (sem overrides)
 * - Configura√ß√£o direta SMTP sem m√∫ltiplas tentativas
 * - Logs m√≠nimos e essenciais
 */

// Fun√ß√£o simples para descriptografar senha (Base64)
function decryptPassword(encryptedPassword: string): string {
  return Buffer.from(encryptedPassword, 'base64').toString('utf8');
}

// POST /api/simple-email/send - Vers√£o ultra simples
router.post('/send', async (req: Request, res: Response) => {
  try {
    // ‚úÖ AUTENTICA√á√ÉO B√ÅSICA SUPABASE - padr√£o oficial
    const authHeader = req.headers.authorization;
    if (!authHeader?.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, error: 'Token de acesso requerido' });
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      return res.status(401).json({ success: false, error: 'Token inv√°lido ou expirado' });
    }

    // ‚úÖ Validar tenant_id do user_metadata
    const tenantId = user.user_metadata?.tenant_id;
    if (!tenantId) {
      return res.status(401).json({ success: false, error: 'Usu√°rio n√£o possui tenant v√°lido' });
    }

    const { to, subject, message, lead_id } = req.body;

    // Valida√ß√£o b√°sica
    if (!to || !subject || !message) {
      return res.status(400).json({ 
        success: false, 
        error: 'Campos obrigat√≥rios: to, subject, message' 
      });
    }

    console.log('üìß [SIMPLE-EMAIL] Enviando email:', {
      to,
      subject: subject.substring(0, 30) + '...',
      user_id: user.id.substring(0, 8)
    });

    // Buscar integra√ß√£o de e-mail ativa do usu√°rio
    const { data: integration, error: integrationError } = await supabase
      .from('user_email_integrations')
      .select('*')
      .eq('user_id', user.id)
      .eq('is_active', true)
      .single();

    if (integrationError || !integration) {
      console.error('‚ùå [SIMPLE-EMAIL] Nenhuma integra√ß√£o encontrada');
      return res.status(400).json({
        success: false,
        error: 'Configure seu email em Integra√ß√µes ‚Üí E-mail pessoal'
      });
    }

    console.log('üîç [SIMPLE-EMAIL] Integra√ß√£o encontrada:', {
      email: integration.email_address,
      host: integration.smtp_host,
      port: integration.smtp_port,
      username: integration.smtp_username,
      provider: integration.provider
    });

    // ‚úÖ CONFIGURA√á√ÉO SEGUINDO PADR√ïES CONTEXT7/NODEMAILER
    const password = decryptPassword(integration.smtp_password_encrypted);
    
    const transportConfig = {
      host: integration.smtp_host,
      port: integration.smtp_port,
      secure: integration.smtp_port === 465, // SSL para porta 465, STARTTLS para outras
      auth: {
        user: integration.smtp_username,
        pass: password
      },
      // ‚úÖ TIMEOUTS PADR√ÉO NODEMAILER - MAIS COMPAT√çVEIS
      connectionTimeout: 60000,        // 60 segundos para conectar (padr√£o: 2min)
      greetingTimeout: 30000,          // 30 segundos para greeting (padr√£o: 30s)
      socketTimeout: 75000,            // 75 segundos para socket (padr√£o: 10min - reduzido para corporativo)
      // ‚úÖ TLS SEGUINDO PADR√ïES CONTEXT7 - SEGURO MAS FLEX√çVEL
      tls: {
        rejectUnauthorized: false,     // Flex√≠vel para certificados corporativos
        minVersion: 'TLSv1.2',         // Vers√£o segura m√≠nima conforme Context7
        // Para servidores com IP fixo corporativo (UNI5)
        servername: integration.smtp_host // Valida√ß√£o TLS adequada
      },
      // ‚úÖ DEBUG CONTROLADO PARA PRODU√á√ÉO
      debug: process.env.NODE_ENV === 'development', // S√≥ em desenvolvimento
      logger: process.env.NODE_ENV === 'development' // S√≥ em desenvolvimento
    };

    console.log('üîß [SIMPLE-EMAIL] Configura√ß√£o SMTP:', {
      host: transportConfig.host,
      port: transportConfig.port,
      secure: transportConfig.secure,
      user: transportConfig.auth.user
    });

    console.log('üìß [SIMPLE-EMAIL] Criando transporter com timeouts otimizados');
    const transporter = nodemailer.createTransport(transportConfig);

    // ‚úÖ TESTAR CONEX√ÉO ANTES DE ENVIAR
    console.log('üîç [SIMPLE-EMAIL] Verificando conex√£o SMTP...');
    try {
      await transporter.verify();
      console.log('‚úÖ [SIMPLE-EMAIL] Conex√£o SMTP verificada com sucesso');
    } catch (verifyError: any) {
      console.error('‚ùå [SIMPLE-EMAIL] Falha na verifica√ß√£o SMTP:', {
        code: verifyError.code,
        command: verifyError.command,
        message: verifyError.message
      });
      // Continuar mesmo se verifica√ß√£o falhar (alguns servidores n√£o suportam verify)
      console.log('‚ö†Ô∏è [SIMPLE-EMAIL] Continuando apesar da falha na verifica√ß√£o...');
    }

    const mailOptions = {
      from: `${integration.display_name || 'CRM'} <${integration.email_address}>`,
      to: to,
      subject: subject,
      html: message.replace(/\n/g, '<br>'),
      text: message
    };

    console.log('üìß [SIMPLE-EMAIL] Enviando email...');
    
    // ‚úÖ ENVIO SIMPLES - SEM TIMEOUT CUSTOMIZADO
    const result = await transporter.sendMail(mailOptions);
    
    console.log('‚úÖ [SIMPLE-EMAIL] Email enviado com sucesso:', {
      messageId: result.messageId,
      response: result.response
    });

    // ‚úÖ SALVAR HIST√ìRICO SIMPLES (n√£o bloquear se falhar)
    try {
      await supabase.from('email_history').insert({
        tenant_id: tenantId,
        user_id: user.id,
        lead_id: lead_id || null,
        to_email: to,
        from_email: integration.email_address,
        subject: subject,
        content: message,
        status: 'sent',
        sent_at: new Date().toISOString(),
        email_message_id: result.messageId
      });
    } catch (historyError) {
      console.warn('‚ö†Ô∏è [SIMPLE-EMAIL] Hist√≥rico n√£o salvo (n√£o cr√≠tico):', historyError);
    }

    res.json({
      success: true,
      message: 'E-mail enviado com sucesso',
      data: {
        messageId: result.messageId,
        to,
        subject,
        sent_at: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('‚ùå [SIMPLE-EMAIL] Erro no envio:', error);
    
    let errorMessage = 'Erro ao enviar e-mail';
    
    if (error.code === 'EAUTH') {
      errorMessage = 'Credenciais de email inv√°lidas. Verifique sua configura√ß√£o.';
    } else if (error.code === 'ENOTFOUND') {
      errorMessage = 'Servidor SMTP n√£o encontrado. Verifique a configura√ß√£o.';
    } else if (error.code === 'ECONNECTION') {
      errorMessage = 'Falha na conex√£o com o servidor SMTP.';
    } else if (error.code === 'ETIMEDOUT') {
      errorMessage = 'Timeout na conex√£o SMTP. Tente novamente.';
    } else if (error.message) {
      errorMessage = error.message;
    }

    res.status(500).json({
      success: false,
      error: errorMessage,
      details: {
        code: error.code,
        command: error.command,
        responseCode: error.responseCode
      }
    });
  }
});

// POST /api/simple-email/test-connection - Testar apenas conectividade SMTP
router.post('/test-connection', async (req: Request, res: Response) => {
  try {
    // ‚úÖ AUTENTICA√á√ÉO B√ÅSICA SUPABASE - padr√£o oficial
    const authHeader = req.headers.authorization;
    if (!authHeader?.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, error: 'Token de acesso requerido' });
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      return res.status(401).json({ success: false, error: 'Token inv√°lido ou expirado' });
    }

    // ‚úÖ Validar tenant_id do user_metadata
    const tenantId = user.user_metadata?.tenant_id;
    if (!tenantId) {
      return res.status(401).json({ success: false, error: 'Usu√°rio n√£o possui tenant v√°lido' });
    }

    console.log('üß™ [TEST-SMTP] Iniciando teste de conectividade...');

    // Buscar integra√ß√£o de e-mail ativa do usu√°rio
    const { data: integration, error: integrationError } = await supabase
      .from('user_email_integrations')
      .select('*')
      .eq('user_id', user.id)
      .eq('is_active', true)
      .single();

    if (integrationError || !integration) {
      return res.status(400).json({
        success: false,
        error: 'Nenhuma configura√ß√£o SMTP encontrada'
      });
    }

    console.log('üîç [TEST-SMTP] Configura√ß√£o encontrada:', {
      email: integration.email_address,
      host: integration.smtp_host,
      port: integration.smtp_port,
      username: integration.smtp_username
    });

    const password = decryptPassword(integration.smtp_password_encrypted);
    
    const transportConfig = {
      host: integration.smtp_host,
      port: integration.smtp_port,
      secure: integration.smtp_port === 465,
      auth: {
        user: integration.smtp_username,
        pass: password
      },
      // ‚úÖ TIMEOUTS PADR√ÉO NODEMAILER - MAIS COMPAT√çVEIS
      connectionTimeout: 60000,        // 60 segundos para conectar
      greetingTimeout: 30000,          // 30 segundos para greeting
      socketTimeout: 75000,            // 75 segundos para socket
      // ‚úÖ TLS SEGUINDO PADR√ïES CONTEXT7
      tls: {
        rejectUnauthorized: false,     // Flex√≠vel para certificados corporativos
        minVersion: 'TLSv1.2',         // Vers√£o segura m√≠nima
        servername: integration.smtp_host // Valida√ß√£o TLS adequada
      },
      // ‚úÖ DEBUG CONTROLADO
      debug: process.env.NODE_ENV === 'development',
      logger: process.env.NODE_ENV === 'development'
    };

    console.log('üîß [TEST-SMTP] Testando com configura√ß√£o:', {
      host: transportConfig.host,
      port: transportConfig.port,
      secure: transportConfig.secure
    });

    const transporter = nodemailer.createTransport(transportConfig);

    // Teste de conectividade
    console.log('üß™ [TEST-SMTP] Executando transporter.verify()...');
    await transporter.verify();
    console.log('‚úÖ [TEST-SMTP] Conex√£o SMTP bem-sucedida!');

    res.json({
      success: true,
      message: 'Conectividade SMTP funcionando perfeitamente',
      data: {
        host: integration.smtp_host,
        port: integration.smtp_port,
        email: integration.email_address,
        tested_at: new Date().toISOString()
      }
    });

  } catch (error: any) {
    console.error('‚ùå [TEST-SMTP] Erro de conectividade:', {
      message: error.message,
      code: error.code,
      command: error.command,
      errno: error.errno,
      syscall: error.syscall,
      address: error.address,
      port: error.port
    });

    let errorMessage = 'Erro de conectividade SMTP';
    let suggestion = '';

    if (error.code === 'ENOTFOUND') {
      errorMessage = 'Servidor SMTP n√£o encontrado';
      suggestion = 'Verifique o hostname do servidor SMTP';
    } else if (error.code === 'ETIMEDOUT') {
      errorMessage = 'Timeout na conex√£o SMTP';
      suggestion = 'Servidor pode estar indispon√≠vel ou bloqueado por firewall';
    } else if (error.code === 'ECONNREFUSED') {
      errorMessage = 'Conex√£o recusada pelo servidor';
      suggestion = 'Verifique se a porta est√° correta e se o servidor permite conex√µes';
    } else if (error.code === 'EAUTH') {
      errorMessage = 'Falha na autentica√ß√£o';
      suggestion = 'Verifique usu√°rio e senha SMTP';
    } else if (error.message) {
      errorMessage = error.message;
    }

    res.status(500).json({
      success: false,
      error: errorMessage,
      suggestion,
      details: {
        code: error.code,
        command: error.command,
        address: error.address,
        port: error.port,
        errno: error.errno
      }
    });
  }
});

// POST /api/simple-email/validate-config - Validar configura√ß√£o SMTP
router.post('/validate-config', async (req: Request, res: Response) => {
  try {
    // ‚úÖ AUTENTICA√á√ÉO B√ÅSICA SUPABASE - padr√£o oficial
    const authHeader = req.headers.authorization;
    if (!authHeader?.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, error: 'Token de acesso requerido' });
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      return res.status(401).json({ success: false, error: 'Token inv√°lido ou expirado' });
    }

    // ‚úÖ Validar tenant_id do user_metadata
    const tenantId = user.user_metadata?.tenant_id;
    if (!tenantId) {
      return res.status(401).json({ success: false, error: 'Usu√°rio n√£o possui tenant v√°lido' });
    }

    const { host, port, user: smtpUser, password }: SmtpConfig = req.body;

    // Valida√ß√£o b√°sica dos campos
    if (!host || !port || !smtpUser || !password) {
      return res.status(400).json({
        success: false,
        error: 'Todos os campos s√£o obrigat√≥rios: host, port, user, password'
      });
    }

    console.log('üß™ [VALIDATE-CONFIG] Valida√ß√£o solicitada para:', {
      host,
      port,
      user: smtpUser,
      user_id: user.id.substring(0, 8)
    });

    // Executar valida√ß√£o
    const result = await emailValidationService.testSmtpConnection({
      host,
      port: parseInt(String(port)),
      user: smtpUser,
      password
    });

    if (result.success) {
      console.log('‚úÖ [VALIDATE-CONFIG] Configura√ß√£o v√°lida');
      res.json({
        success: true,
        message: result.message,
        details: result.details
      });
    } else {
      console.log('‚ùå [VALIDATE-CONFIG] Configura√ß√£o inv√°lida:', result.error);
      res.status(400).json({
        success: false,
        error: result.error,
        details: result.details
      });
    }

  } catch (error: any) {
    console.error('‚ùå [VALIDATE-CONFIG] Erro interno:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

// POST /api/simple-email/save-config - Salvar configura√ß√£o apenas se v√°lida
router.post('/save-config', async (req: Request, res: Response) => {
  try {
    // ‚úÖ AUTENTICA√á√ÉO B√ÅSICA SUPABASE - padr√£o oficial
    const authHeader = req.headers.authorization;
    if (!authHeader?.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, error: 'Token de acesso requerido' });
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      return res.status(401).json({ success: false, error: 'Token inv√°lido ou expirado' });
    }

    // ‚úÖ Validar tenant_id do user_metadata
    const tenantId = user.user_metadata?.tenant_id;
    if (!tenantId) {
      return res.status(401).json({ success: false, error: 'Usu√°rio n√£o possui tenant v√°lido' });
    }

    const { host, port, user: smtpUser, password }: SmtpConfig = req.body;

    // Valida√ß√£o b√°sica dos campos
    if (!host || !port || !smtpUser || !password) {
      return res.status(400).json({
        success: false,
        error: 'Todos os campos s√£o obrigat√≥rios: host, port, user, password'
      });
    }

    console.log('üíæ [SAVE-CONFIG] Salvamento com valida√ß√£o solicitado:', {
      host,
      port,
      user: smtpUser,
      user_id: user.id.substring(0, 8),
      tenant_id: tenantId.substring(0, 8)
    });

    // Executar salvamento com valida√ß√£o
    const result = await emailValidationService.saveConfigWithValidation(
      {
        host,
        port: parseInt(String(port)),
        user: smtpUser,
        password
      },
      user.id,
      tenantId
    );

    if (result.success) {
      console.log('‚úÖ [SAVE-CONFIG] Configura√ß√£o salva com sucesso');
      res.json({
        success: true,
        message: result.message,
        details: result.details
      });
    } else {
      console.log('‚ùå [SAVE-CONFIG] Falha no salvamento:', result.error);
      res.status(400).json({
        success: false,
        error: result.error,
        details: result.details
      });
    }

  } catch (error: any) {
    console.error('‚ùå [SAVE-CONFIG] Erro interno:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

// DELETE /api/simple-email/remove-config - Remover configura√ß√£o SMTP
router.delete('/remove-config', async (req: Request, res: Response) => {
  try {
    // ‚úÖ AUTENTICA√á√ÉO B√ÅSICA SUPABASE - padr√£o oficial
    const authHeader = req.headers.authorization;
    if (!authHeader?.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, error: 'Token de acesso requerido' });
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      return res.status(401).json({ success: false, error: 'Token inv√°lido ou expirado' });
    }

    // ‚úÖ Validar tenant_id do user_metadata
    const tenantId = user.user_metadata?.tenant_id;
    if (!tenantId) {
      return res.status(401).json({ success: false, error: 'Usu√°rio n√£o possui tenant v√°lido' });
    }

    console.log('üóëÔ∏è [REMOVE-CONFIG] Removendo configura√ß√£o SMTP para usu√°rio:', user.id.substring(0, 8));

    // Desativar configura√ß√£o existente
    const { data, error } = await supabase
      .from('user_email_integrations')
      .update({ 
        is_active: false,
        updated_at: new Date().toISOString()
      })
      .eq('user_id', user.id)
      .eq('is_active', true)
      .select();

    if (error) {
      console.error('‚ùå [REMOVE-CONFIG] Erro ao desativar configura√ß√£o:', error);
      return res.status(500).json({
        success: false,
        error: 'Erro ao remover configura√ß√£o de email',
        details: error
      });
    }

    if (!data || data.length === 0) {
      return res.status(404).json({
        success: false,
        error: 'Nenhuma configura√ß√£o ativa encontrada para remover'
      });
    }

    console.log('‚úÖ [REMOVE-CONFIG] Configura√ß√£o removida com sucesso');

    res.json({
      success: true,
      message: 'Configura√ß√£o de email removida com sucesso',
      data: {
        removed_at: new Date().toISOString(),
        configurations_removed: data.length
      }
    });

  } catch (error: any) {
    console.error('‚ùå [REMOVE-CONFIG] Erro interno:', error);
    res.status(500).json({
      success: false,
      error: 'Erro interno do servidor',
      details: error.message
    });
  }
});

// GET /api/simple-email/integrations - Buscar integra√ß√µes de email ativas
router.get('/integrations', async (req: Request, res: Response) => {
  try {
    // ‚úÖ AUTENTICA√á√ÉO B√ÅSICA SUPABASE - padr√£o oficial
    const authHeader = req.headers.authorization;
    if (!authHeader?.startsWith('Bearer ')) {
      return res.status(401).json({ success: false, error: 'Token de acesso requerido' });
    }

    const token = authHeader.split(' ')[1];
    const { data: { user }, error: userError } = await supabase.auth.getUser(token);
    
    if (userError || !user) {
      return res.status(401).json({ success: false, error: 'Token inv√°lido ou expirado' });
    }

    // ‚úÖ Validar tenant_id do user_metadata
    const tenantId = user.user_metadata?.tenant_id;
    if (!tenantId) {
      return res.status(401).json({ success: false, error: 'Usu√°rio n√£o possui tenant v√°lido' });
    }

    console.log('üìß [SIMPLE-EMAIL] Buscando integra√ß√µes para usu√°rio:', user.id.substring(0, 8));

    // Buscar integra√ß√µes ativas do usu√°rio
    const { data: integrations, error } = await supabase
      .from('user_email_integrations')
      .select('*')
      .eq('user_id', user.id)
      .eq('is_active', true);

    if (error) {
      console.error('‚ùå [SIMPLE-EMAIL] Erro ao buscar integra√ß√µes:', error);
      return res.status(500).json({ success: false, error: 'Erro interno' });
    }

    // Mascarar senhas na resposta
    const safeIntegrations = integrations?.map(integration => ({
      ...integration,
      smtp_password_encrypted: '********'
    })) || [];

    console.log('‚úÖ [SIMPLE-EMAIL] Integra√ß√µes encontradas:', safeIntegrations.length);

    res.json({ success: true, data: safeIntegrations });

  } catch (error) {
    console.error('‚ùå [SIMPLE-EMAIL] Erro interno:', error);
    res.status(500).json({ success: false, error: 'Erro interno' });
  }
});

export default router;