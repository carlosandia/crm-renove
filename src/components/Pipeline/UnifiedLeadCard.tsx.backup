import React, { useState } from 'react';
import { Draggable } from '@hello-pangea/dnd';
import { Lead } from '../../types/Pipeline';
import { User } from '../../types/User';
import { Button } from '../ui/button';
import { Badge } from '../ui/badge';
import { 
  Edit,
  Trash2,
  MoreVertical,
  User as UserIcon,
  Clock,
  Mail,
  Phone,
  Building2,
  DollarSign,
  Calendar,
  UserX,
  Eye
} from 'lucide-react';

interface UnifiedLeadCardProps {
  lead: Lead;
  userRole: 'admin' | 'member' | 'super_admin';
  assignedMember?: User;
  index?: number; // Para drag and drop
  
  // Permiss√µes condicionais
  canEdit?: boolean;
  canTransfer?: boolean;
  canDelete?: boolean;
  canView?: boolean;
  canDrag?: boolean;
  
  // Callbacks
  onEdit?: (lead: Lead) => void;
  onTransfer?: (lead: Lead) => void;
  onDelete?: (lead: Lead) => void;
  onView?: (lead: Lead) => void;
  onViewDetails?: (lead: Lead) => void;
  
  // Configura√ß√µes visuais
  showVendorInfo?: boolean;
  showTemperature?: boolean;
  showActions?: boolean;
}

const UnifiedLeadCard: React.FC<UnifiedLeadCardProps> = ({
  lead,
  userRole,
  assignedMember,
  index,
  canEdit = true,
  canTransfer = false,
  canDelete = false,
  canView = true,
  canDrag = false,
  onEdit,
  onTransfer,
  onDelete,
  onView,
  onViewDetails,
  showVendorInfo = true,
  showTemperature = true,
  showActions = true
}) => {
  const [showActionsMenu, setShowActionsMenu] = useState(false);

  // Fun√ß√£o helper para calcular dias na etapa
  const getDaysInStage = (lead: Lead): number => {
    const movedAt = lead.moved_at || lead.updated_at || lead.created_at;
    const daysDiff = Math.floor(
      (new Date().getTime() - new Date(movedAt).getTime()) / (1000 * 60 * 60 * 24)
    );
    return daysDiff;
  };

  // Fun√ß√£o para determinar cor da temperatura
  const getTemperatureColor = (days: number): string => {
    if (days <= 7) return 'bg-green-500';
    if (days <= 14) return 'bg-yellow-500';
    return 'bg-red-500';
  };

  // Extrair dados do lead
  const leadData = lead.custom_data || {};
  const leadName = leadData.nome_lead || leadData.nome_oportunidade || leadData.first_name || 'Lead sem nome';
  const leadEmail = leadData.email;
  const leadPhone = leadData.telefone || leadData.phone;
  const leadCompany = leadData.empresa || leadData.company;
  const leadValue = leadData.valor;
  const daysInStage = getDaysInStage(lead);

  // Conte√∫do do card
  const cardContent = (
    <div className="bg-white p-4 rounded-lg border border-gray-200 hover:shadow-md transition-shadow group relative">
      {/* Header do Card */}
      <div className="flex items-start justify-between mb-3">
        <h4 
          className="font-medium text-gray-900 truncate flex-1 cursor-pointer hover:text-blue-600 transition-colors"
          onClick={() => {
            console.log('üñ±Ô∏è CARD: Clique detectado no nome do lead:', leadName, lead.id);
            console.log('üñ±Ô∏è CARD: onViewDetails dispon√≠vel?', !!onViewDetails);
            if (onViewDetails) {
              console.log('üñ±Ô∏è CARD: Chamando onViewDetails...');
              onViewDetails(lead);
            } else {
              console.log('üö´ CARD: onViewDetails n√£o est√° dispon√≠vel!');
            }
          }}
          title={leadName}
        >
          {leadName}
        </h4>
        
        {/* Dropdown de A√ß√µes - Apenas para roles com permiss√µes */}
        {showActions && (canTransfer || canDelete || (userRole === 'admin')) && (
          <div className="relative">
            <Button
              variant="ghost"
              size="sm"
              className="h-6 w-6 p-0 opacity-0 group-hover:opacity-100 transition-opacity"
              onClick={(e) => {
                e.stopPropagation();
                setShowActionsMenu(!showActionsMenu);
              }}
            >
              <MoreVertical className="h-3 w-3" />
            </Button>
            
            {/* Menu de a√ß√µes */}
            {showActionsMenu && (
              <div className="absolute right-0 top-6 bg-white border rounded-md shadow-lg z-10 min-w-[150px]">
                {canView && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowActionsMenu(false);
                      onView?.(lead);
                    }}
                    className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"
                  >
                    <Eye className="h-3 w-3" />
                    Visualizar
                  </button>
                )}
                {canEdit && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowActionsMenu(false);
                      onEdit?.(lead);
                    }}
                    className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"
                  >
                    <Edit className="h-3 w-3" />
                    Editar
                  </button>
                )}
                {canTransfer && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowActionsMenu(false);
                      onTransfer?.(lead);
                    }}
                    className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 flex items-center gap-2"
                  >
                    <UserX className="h-3 w-3" />
                    Transferir
                  </button>
                )}
                {canDelete && (
                  <button
                    onClick={(e) => {
                      e.stopPropagation();
                      setShowActionsMenu(false);
                      onDelete?.(lead);
                    }}
                    className="w-full text-left px-3 py-2 text-sm hover:bg-gray-50 text-red-600 flex items-center gap-2"
                  >
                    <Trash2 className="h-3 w-3" />
                    Excluir
                  </button>
                )}
              </div>
            )}
          </div>
        )}
      </div>

      {/* Vendedor Respons√°vel - Apenas se showVendorInfo */}
      {showVendorInfo && assignedMember && (
        <div className="flex items-center gap-2 mb-3 text-xs">
          <UserIcon className="h-3 w-3 text-gray-400" />
          <span className="text-gray-600">
            {assignedMember.first_name} {assignedMember.last_name}
          </span>
          <Badge variant="outline" className="text-xs px-1 py-0">
            {assignedMember.role === 'member' ? 'Vendedor' : 'Admin'}
          </Badge>
        </div>
      )}

      {/* Informa√ß√µes do Lead */}
      <div className="text-sm text-gray-600 space-y-2">
        {leadEmail && (
          <div className="flex items-center gap-2">
            <Mail className="h-3 w-3 text-gray-400" />
            <span className="truncate">{leadEmail}</span>
          </div>
        )}
        
        {leadPhone && (
          <div className="flex items-center gap-2">
            <Phone className="h-3 w-3 text-gray-400" />
            <span>{leadPhone}</span>
          </div>
        )}
        
        {leadCompany && (
          <div className="flex items-center gap-2">
            <Building2 className="h-3 w-3 text-gray-400" />
            <span className="truncate">{leadCompany}</span>
          </div>
        )}
        
        {leadValue && (
          <div className="flex items-center gap-2">
            <DollarSign className="h-3 w-3 text-green-500" />
            <span className="font-medium text-green-600">
              {new Intl.NumberFormat('pt-BR', {
                style: 'currency',
                currency: 'BRL',
              }).format(Number(leadValue))}
            </span>
          </div>
        )}
      </div>

      {/* Footer com Data e Status */}
      <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-100">
        <div className="flex items-center gap-1 text-xs text-gray-500">
          <Calendar className="h-3 w-3" />
          <span>{new Date(lead.created_at).toLocaleDateString('pt-BR')}</span>
        </div>
        
        {/* Indicador de Temperatura/Urg√™ncia */}
        {showTemperature && (
          <div className="flex items-center gap-1">
            <Clock className="h-3 w-3 text-gray-400" />
            <div className={`w-2 h-2 rounded-full ${getTemperatureColor(daysInStage)}`} />
            <span className="text-xs text-gray-500">
              {daysInStage} {daysInStage === 1 ? 'dia' : 'dias'}
            </span>
          </div>
        )}
      </div>

      {/* Status Badge - Baseado na etapa */}
      <div className="absolute top-2 right-2">
        <Badge 
          variant="secondary" 
          className="text-xs opacity-0 group-hover:opacity-100 transition-opacity"
        >
          {userRole === 'admin' ? 'Admin' : 'Operacional'}
        </Badge>
      </div>
    </div>
  );

  // Se pode arrastar e tem index, envolver com Draggable
  if (canDrag && typeof index === 'number') {
    return (
      <Draggable draggableId={lead.id} index={index}>
        {(provided, snapshot) => (
          <div
            ref={provided.innerRef}
            {...provided.draggableProps}
            {...provided.dragHandleProps}
            className={snapshot.isDragging ? 'rotate-2 shadow-lg' : ''}
          >
            {cardContent}
          </div>
        )}
      </Draggable>
    );
  }

  // Sen√£o, retornar apenas o conte√∫do
  return cardContent;
};

export default UnifiedLeadCard; 