-- =====================================================
-- MIGRA√á√ÉO: VALIDA√á√ÉO DE NOMES √öNICOS DE PIPELINES
-- Data: 2025-01-30
-- Descri√ß√£o: Implementa valida√ß√£o enterprise para nomes √∫nicos
--           de pipelines por tenant (case-insensitive)
-- =====================================================

-- 1. CRIAR √çNDICE √öNICO CASE-INSENSITIVE
-- =====================================================
-- Este √≠ndice garante que n√£o podem existir duas pipelines com o mesmo nome
-- (ignorando mai√∫sculas/min√∫sculas) dentro do mesmo tenant
CREATE UNIQUE INDEX IF NOT EXISTS idx_pipelines_unique_name_per_tenant
ON pipelines (tenant_id, LOWER(TRIM(name)));

-- 2. FUN√á√ÉO DE VALIDA√á√ÉO DE NOME √öNICO
-- =====================================================
-- Fun√ß√£o que verifica se um nome de pipeline j√° existe para um tenant
-- Retorna sugest√µes autom√°ticas caso o nome j√° esteja em uso
CREATE OR REPLACE FUNCTION validate_pipeline_name_unique(
  p_name TEXT,
  p_tenant_id UUID,
  p_pipeline_id UUID DEFAULT NULL -- Para edi√ß√£o, excluir o pr√≥prio pipeline
)
RETURNS JSONB AS $$
DECLARE
  name_clean TEXT;
  existing_count INTEGER;
  suggested_name TEXT;
  counter INTEGER := 1;
  result JSONB;
BEGIN
  -- Limpar e normalizar o nome
  name_clean := LOWER(TRIM(p_name));
  
  -- Verificar se nome est√° vazio
  IF name_clean = '' OR name_clean IS NULL THEN
    RETURN jsonb_build_object(
      'is_valid', false,
      'error', 'Nome da pipeline √© obrigat√≥rio',
      'suggestion', NULL
    );
  END IF;
  
  -- Contar pipelines existentes com o mesmo nome (case-insensitive)
  SELECT COUNT(*) INTO existing_count
  FROM pipelines
  WHERE tenant_id = p_tenant_id
    AND LOWER(TRIM(name)) = name_clean
    AND is_active = true
    AND (p_pipeline_id IS NULL OR id != p_pipeline_id);
  
  -- Se n√£o h√° conflito, nome √© v√°lido
  IF existing_count = 0 THEN
    RETURN jsonb_build_object(
      'is_valid', true,
      'error', NULL,
      'suggestion', NULL
    );
  END IF;
  
  -- Gerar sugest√£o autom√°tica para nome √∫nico
  suggested_name := p_name;
  LOOP
    counter := counter + 1;
    suggested_name := p_name || ' (' || counter || ')';
    
    SELECT COUNT(*) INTO existing_count
    FROM pipelines
    WHERE tenant_id = p_tenant_id
      AND LOWER(TRIM(name)) = LOWER(TRIM(suggested_name))
      AND is_active = true
      AND (p_pipeline_id IS NULL OR id != p_pipeline_id);
      
    -- Se encontrou nome √∫nico, parar
    IF existing_count = 0 THEN
      EXIT;
    END IF;
    
    -- Prevenir loop infinito
    IF counter > 100 THEN
      suggested_name := p_name || ' (' || EXTRACT(EPOCH FROM NOW())::INT || ')';
      EXIT;
    END IF;
  END LOOP;
  
  -- Retornar resultado com sugest√£o
  RETURN jsonb_build_object(
    'is_valid', false,
    'error', 'J√° existe uma pipeline com este nome nesta empresa',
    'suggestion', suggested_name
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 3. TRIGGER PARA VALIDA√á√ÉO AUTOM√ÅTICA
-- =====================================================
-- Trigger que executa a valida√ß√£o automaticamente antes de INSERT/UPDATE
CREATE OR REPLACE FUNCTION trigger_validate_pipeline_name()
RETURNS TRIGGER AS $$
DECLARE
  validation_result JSONB;
BEGIN
  -- Executar valida√ß√£o
  SELECT validate_pipeline_name_unique(
    NEW.name,
    NEW.tenant_id,
    CASE WHEN TG_OP = 'UPDATE' THEN NEW.id ELSE NULL END
  ) INTO validation_result;
  
  -- Se n√£o √© v√°lido, impedir opera√ß√£o
  IF NOT (validation_result->>'is_valid')::BOOLEAN THEN
    RAISE EXCEPTION 'PIPELINE_NAME_CONFLICT: %', validation_result->>'error'
      USING HINT = validation_result->>'suggestion';
  END IF;
  
  RETURN NEW;
END;
$$ LANGUAGE plpgsql;

-- Criar trigger para INSERT
DROP TRIGGER IF EXISTS trigger_pipeline_name_validation_insert ON pipelines;
CREATE TRIGGER trigger_pipeline_name_validation_insert
  BEFORE INSERT ON pipelines
  FOR EACH ROW
  EXECUTE FUNCTION trigger_validate_pipeline_name();

-- Criar trigger para UPDATE
DROP TRIGGER IF EXISTS trigger_pipeline_name_validation_update ON pipelines;
CREATE TRIGGER trigger_pipeline_name_validation_update
  BEFORE UPDATE ON pipelines
  FOR EACH ROW
  WHEN (OLD.name IS DISTINCT FROM NEW.name OR OLD.tenant_id IS DISTINCT FROM NEW.tenant_id)
  EXECUTE FUNCTION trigger_validate_pipeline_name();

-- 4. FUN√á√ÉO PARA OBTER SUGEST√ïES (USADO PELO FRONTEND)
-- =====================================================
-- Fun√ß√£o que o frontend pode chamar para validar e obter sugest√µes
-- antes mesmo de submeter o formul√°rio
CREATE OR REPLACE FUNCTION get_pipeline_name_suggestions(
  p_name TEXT,
  p_tenant_id UUID,
  p_pipeline_id UUID DEFAULT NULL
)
RETURNS JSONB AS $$
DECLARE
  validation_result JSONB;
  similar_names TEXT[];
BEGIN
  -- Validar nome principal
  SELECT validate_pipeline_name_unique(p_name, p_tenant_id, p_pipeline_id)
  INTO validation_result;
  
  -- Buscar nomes similares para inspira√ß√£o
  SELECT ARRAY_AGG(DISTINCT name ORDER BY name)
  INTO similar_names
  FROM pipelines
  WHERE tenant_id = p_tenant_id
    AND is_active = true
    AND (p_pipeline_id IS NULL OR id != p_pipeline_id)
    AND (
      LOWER(name) LIKE LOWER('%' || TRIM(p_name) || '%')
      OR LOWER(TRIM(p_name)) LIKE LOWER('%' || name || '%')
    )
  LIMIT 5;
  
  -- Retornar resultado completo
  RETURN jsonb_build_object(
    'validation', validation_result,
    'similar_names', COALESCE(similar_names, ARRAY[]::TEXT[]),
    'timestamp', EXTRACT(EPOCH FROM NOW())
  );
END;
$$ LANGUAGE plpgsql SECURITY DEFINER;

-- 5. COMENT√ÅRIOS E DOCUMENTA√á√ÉO
-- =====================================================
COMMENT ON INDEX idx_pipelines_unique_name_per_tenant IS 
'√çndice √∫nico case-insensitive para nomes de pipelines por tenant - previne duplicatas';

COMMENT ON FUNCTION validate_pipeline_name_unique IS 
'Valida se nome de pipeline √© √∫nico dentro do tenant e gera sugest√µes autom√°ticas';

COMMENT ON FUNCTION get_pipeline_name_suggestions IS 
'Fun√ß√£o para frontend obter valida√ß√£o e sugest√µes de nomes antes de submeter formul√°rio';

-- 6. GRANT PERMISSIONS
-- =====================================================
-- Permitir que a aplica√ß√£o execute as fun√ß√µes
GRANT EXECUTE ON FUNCTION validate_pipeline_name_unique TO authenticated, anon;
GRANT EXECUTE ON FUNCTION get_pipeline_name_suggestions TO authenticated, anon;

-- 7. LOG DA MIGRA√á√ÉO
-- =====================================================
DO $$
BEGIN
  RAISE NOTICE '‚úÖ MIGRA√á√ÉO CONCLU√çDA: Pipeline Name Validation Enterprise';
  RAISE NOTICE 'üìã Recursos implementados:';
  RAISE NOTICE '   ‚Ä¢ √çndice √∫nico case-insensitive (nome + tenant_id)';
  RAISE NOTICE '   ‚Ä¢ Fun√ß√£o de valida√ß√£o com sugest√µes autom√°ticas';
  RAISE NOTICE '   ‚Ä¢ Triggers autom√°ticos para INSERT/UPDATE';
  RAISE NOTICE '   ‚Ä¢ API para frontend (get_pipeline_name_suggestions)';
  RAISE NOTICE '   ‚Ä¢ Valida√ß√£o enterprise igual grandes CRMs';
  RAISE NOTICE 'üéØ Sistema agora previne pipelines com nomes duplicados por empresa';
END $$; 