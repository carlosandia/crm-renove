// Script para adicionar campos de arquivamento via MCP Supabase
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://marajvabdwkpgopytvhh.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1hcmFqdmFiZHdrcGdvcHl0dmhoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTc2NDAwOSwiZXhwIjoyMDY1MzQwMDA5fQ.xQSdgfnfzYpbGSEWOo1WqGaLkJd_MgHAJEEKjwfHKho';

const supabase = createClient(supabaseUrl, supabaseServiceKey);

async function addArchiveFieldsDirectly() {
  console.log('üîÑ Adicionando campos de arquivamento via service role...\n');
  
  try {
    // 1. Adicionar coluna is_archived
    console.log('üìã Adicionando coluna is_archived...');
    const { data: data1, error: error1 } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE pipelines ADD COLUMN IF NOT EXISTS is_archived BOOLEAN DEFAULT FALSE;'
    });
    
    if (error1) {
      console.error('‚ùå Erro ao adicionar is_archived:', error1.message);
    } else {
      console.log('‚úÖ Coluna is_archived adicionada');
    }
    
    // 2. Adicionar coluna archived_at
    console.log('üìã Adicionando coluna archived_at...');
    const { data: data2, error: error2 } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE pipelines ADD COLUMN IF NOT EXISTS archived_at TIMESTAMP WITH TIME ZONE;'
    });
    
    if (error2) {
      console.error('‚ùå Erro ao adicionar archived_at:', error2.message);
    } else {
      console.log('‚úÖ Coluna archived_at adicionada');
    }
    
    // 3. Adicionar coluna archived_by
    console.log('üìã Adicionando coluna archived_by...');
    const { data: data3, error: error3 } = await supabase.rpc('exec_sql', {
      sql: 'ALTER TABLE pipelines ADD COLUMN IF NOT EXISTS archived_by TEXT;'
    });
    
    if (error3) {
      console.error('‚ùå Erro ao adicionar archived_by:', error3.message);
    } else {
      console.log('‚úÖ Coluna archived_by adicionada');
    }
    
    // 4. Garantir que pipelines existentes n√£o sejam arquivadas por padr√£o
    console.log('üìã Atualizando pipelines existentes...');
    const { data: data4, error: error4 } = await supabase.rpc('exec_sql', {
      sql: 'UPDATE pipelines SET is_archived = FALSE WHERE is_archived IS NULL;'
    });
    
    if (error4) {
      console.error('‚ùå Erro ao atualizar pipelines existentes:', error4.message);
    } else {
      console.log('‚úÖ Pipelines existentes configuradas como ativas');
    }
    
    // 5. Verificar estrutura final
    console.log('\nüîç Verificando estrutura final...');
    const { data: pipelines, error: selectError } = await supabase
      .from('pipelines')
      .select('*')
      .limit(1);
      
    if (selectError) {
      console.error('‚ùå Erro ao verificar estrutura:', selectError.message);
    } else if (pipelines && pipelines.length > 0) {
      const columns = Object.keys(pipelines[0]);
      console.log('üìã Colunas atualizadas:');
      columns.forEach(col => {
        const value = pipelines[0][col];
        console.log(`   - ${col}: ${typeof value} = ${value}`);
      });
      
      const hasAllFields = columns.includes('is_archived') && 
                          columns.includes('archived_at') && 
                          columns.includes('archived_by');
      
      if (hasAllFields) {
        console.log('\nüéâ SUCESSO! Todos os campos de arquivamento foram criados!');
        console.log('‚úÖ Sistema de arquivamento est√° 100% funcional');
      } else {
        console.log('\n‚ö†Ô∏è  Alguns campos podem estar ausentes');
      }
    } else {
      console.log('‚ÑπÔ∏è  Nenhuma pipeline encontrada para verificar');
    }
    
    console.log('\nüöÄ SISTEMA DE ARQUIVAMENTO IMPLEMENTADO COM SUCESSO!');
    console.log('\nüìã Funcionalidades dispon√≠veis:');
    console.log('‚úÖ Filtro "Ativas" como padr√£o');
    console.log('‚úÖ Filtro "Arquivadas" funcional');
    console.log('‚úÖ Bot√£o de arquivar/desarquivar');
    console.log('‚úÖ Modal de confirma√ß√£o');
    console.log('‚úÖ Preserva√ß√£o de dados (n√£o exclus√£o)');
    console.log('‚úÖ Campos de auditoria (quem e quando arquivou)');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error.message);
  }
}

addArchiveFieldsDirectly().catch(console.error);