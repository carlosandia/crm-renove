// CORRE√á√ÉO DEFINITIVA: Cadence Configs RLS usando MCP Supabase
const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = 'https://marajvabdwkpgopytvhh.supabase.co';
const supabaseServiceKey = 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1hcmFqdmFiZHdrcGdvcHl0dmhoIiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc0OTc2NDAwOSwiZXhwIjoyMDY1MzQwMDA5fQ.mkQBVPvhM3OJndsyinoONRUHSDJMh1nFBbPPNH_6cYY';

const supabase = createClient(supabaseUrl, supabaseServiceKey, {
  auth: {
    autoRefreshToken: false,
    persistSession: false
  }
});

async function finalCadenceFix() {
  try {
    console.log('üéØ CORRE√á√ÉO DEFINITIVA: Aplicando solu√ß√£o baseada na documenta√ß√£o Supabase...');
    
    // 1. Verificar se RLS est√° habilitado na tabela
    const { data: rlsStatus, error: rlsError } = await supabase.rpc('exec_sql', {
      sql_text: `
        SELECT 
          schemaname,
          tablename,
          rowsecurity
        FROM pg_tables 
        WHERE tablename = 'cadence_configs';
      `
    });
    
    if (rlsError) {
      console.error('‚ùå Erro ao verificar RLS:', rlsError);
      return;
    }
    
    console.log('üîí Status RLS atual:', rlsStatus);
    
    // 2. Aplicar corre√ß√£o DEFINITIVA baseada nas melhores pr√°ticas Supabase
    const correctionSQL = `
      -- üîß FASE 1: Remover triggers problem√°ticos existentes
      DROP TRIGGER IF EXISTS sync_cadence_configs_tenant_id ON cadence_configs;
      DROP TRIGGER IF EXISTS auto_set_cadence_tenant_id ON cadence_configs;
      
      -- üîß FASE 2: Criar fun√ß√£o SECURITY DEFINER robusta (melhores pr√°ticas Supabase)
      CREATE OR REPLACE FUNCTION handle_cadence_tenant_sync()
      RETURNS TRIGGER
      LANGUAGE plpgsql
      SECURITY DEFINER  -- Executa com privil√©gios do criador (service_role)
      SET search_path = ''  -- Seguran√ßa: path vazio
      AS $$
      DECLARE
          target_tenant_id UUID;
      BEGIN
          -- Log de debugging
          RAISE NOTICE 'Trigger cadence_configs: Opera√ß√£o=%, Pipeline ID=%', TG_OP, NEW.pipeline_id;
          
          -- Se tenant_id j√° est√° preenchido, manter
          IF NEW.tenant_id IS NOT NULL THEN
              RAISE NOTICE 'Tenant ID j√° definido: %', NEW.tenant_id;
              RETURN NEW;
          END IF;
          
          -- Buscar tenant_id da pipeline com tratamento de erro
          BEGIN
              SELECT tenant_id INTO STRICT target_tenant_id 
              FROM pipelines 
              WHERE id = NEW.pipeline_id;
              
              NEW.tenant_id := target_tenant_id;
              
              RAISE NOTICE 'Tenant ID sincronizado: Pipeline=%, Tenant=%', NEW.pipeline_id, NEW.tenant_id;
              
          EXCEPTION
              WHEN NO_DATA_FOUND THEN
                  RAISE EXCEPTION 'Pipeline n√£o encontrada: %', NEW.pipeline_id;
              WHEN TOO_MANY_ROWS THEN
                  RAISE EXCEPTION 'M√∫ltiplas pipelines encontradas para ID: %', NEW.pipeline_id;
          END;
          
          RETURN NEW;
      END;
      $$;
      
      -- üîß FASE 3: Criar trigger ANTES da inser√ß√£o (melhores pr√°ticas)
      CREATE TRIGGER handle_cadence_tenant_sync_trigger
          BEFORE INSERT OR UPDATE ON cadence_configs
          FOR EACH ROW
          EXECUTE FUNCTION handle_cadence_tenant_sync();
      
      -- üîß FASE 4: Garantir que service_role tenha permiss√µes necess√°rias
      GRANT USAGE ON SCHEMA public TO service_role;
      GRANT ALL ON TABLE cadence_configs TO service_role;
      GRANT ALL ON TABLE pipelines TO service_role;
      
      -- üîß FASE 5: Sincronizar dados existentes
      UPDATE cadence_configs 
      SET tenant_id = p.tenant_id 
      FROM pipelines p 
      WHERE cadence_configs.pipeline_id = p.id 
      AND (cadence_configs.tenant_id IS NULL OR cadence_configs.tenant_id != p.tenant_id);
      
      -- üîß FASE 6: Verificar pol√≠ticas RLS existentes
      SELECT policyname, cmd, qual 
      FROM pg_policies 
      WHERE tablename = 'cadence_configs';
    `;
    
    console.log('üöÄ Aplicando corre√ß√£o SQL...');
    
    const { data: result, error: sqlError } = await supabase.rpc('exec_sql', {
      sql_text: correctionSQL
    });
    
    if (sqlError) {
      console.error('‚ùå Erro na corre√ß√£o SQL:', sqlError);
      return;
    }
    
    console.log('‚úÖ Corre√ß√£o SQL aplicada com sucesso!');
    console.log('üìã Pol√≠ticas RLS encontradas:', result);
    
    // 3. TESTE DEFINITIVO: Inser√ß√£o real 
    console.log('üß™ TESTE DEFINITIVO: Inserindo cad√™ncia...');
    
    const { data: pipeline, error: pipelineError } = await supabase
      .from('pipelines')
      .select('id, tenant_id')
      .limit(1)
      .single();
    
    if (pipelineError) {
      console.error('‚ùå Erro ao buscar pipeline:', pipelineError);
      return;
    }
    
    console.log('üìã Pipeline alvo:', {
      id: pipeline.id,
      tenant_id: pipeline.tenant_id
    });
    
    // Inser√ß√£o SEM tenant_id (deve ser preenchido pelo trigger)
    const testCadence = {
      pipeline_id: pipeline.id,
      // tenant_id: OMITIDO - ser√° preenchido pelo trigger
      stage_name: 'Lead',
      stage_order: 0,
      tasks: [
        {
          task_title: 'Teste DEFINITIVO - MCP Supabase',
          channel: 'email',
          day_offset: 1,
          is_active: true
        }
      ],
      is_active: true
    };
    
    const { data: insertedCadence, error: insertError } = await supabase
      .from('cadence_configs')
      .insert(testCadence)
      .select()
      .single();
    
    if (insertError) {
      console.error('‚ùå FALHA NO TESTE:', insertError);
      
      // Diagn√≥stico adicional
      console.log('üîç Diagn√≥stico adicional...');
      
      const { data: triggers, error: triggerError } = await supabase.rpc('exec_sql', {
        sql_text: `
          SELECT 
            trigger_name,
            event_manipulation,
            action_timing,
            action_statement
          FROM information_schema.triggers 
          WHERE event_object_table = 'cadence_configs';
        `
      });
      
      if (!triggerError) {
        console.log('üîß Triggers ativos:', triggers);
      }
      
      return;
    }
    
    console.log('üéâ SUCESSO TOTAL! Cad√™ncia inserida:');
    console.log('üìä Dados finais:', {
      id: insertedCadence.id,
      pipeline_id: insertedCadence.pipeline_id,
      tenant_id: insertedCadence.tenant_id,
      expected_tenant_id: pipeline.tenant_id,
      tenant_sync_success: insertedCadence.tenant_id === pipeline.tenant_id
    });
    
    if (insertedCadence.tenant_id === pipeline.tenant_id) {
      console.log('‚úÖ PROBLEMA RESOLVIDO DEFINITIVAMENTE!');
      console.log('üéØ O trigger est√° funcionando corretamente!');
    } else {
      console.log('‚ö†Ô∏è Ainda h√° problemas na sincroniza√ß√£o...');
    }
    
    // Limpar dados de teste
    await supabase
      .from('cadence_configs')
      .delete()
      .eq('id', insertedCadence.id);
      
    console.log('üßπ Dados de teste removidos');
    
    console.log('\nüéä CORRE√á√ÉO FINAL CONCLU√çDA COM SUCESSO!');
    console.log('üí° A aplica√ß√£o agora deve funcionar corretamente.');
    
  } catch (error) {
    console.error('‚ùå Erro geral na corre√ß√£o:', error);
  }
}

finalCadenceFix();