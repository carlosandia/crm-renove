import React, { useState, useEffect, useCallback } from 'react';
import { useNavigate } from 'react-router-dom';
import { useAuth } from '../contexts/AuthContext';
import RoleBasedMenu from './RoleBasedMenu';
import CRMLayout from './CRMLayout';
import { logger } from '../utils/logger';

const AppDashboard: React.FC = () => {
  const { user, logout } = useAuth();
  const navigate = useNavigate();
  
  // üîÑ PERSIST√äNCIA: Recuperar m√≥dulo ativo do localStorage ou usar padr√£o baseado no role
  const getDefaultModule = (userRole: string) => {
    switch (userRole) {
      case 'super_admin':
        return 'Dashboard Admin';
      case 'admin':
        return 'Dashboard Admin';
      case 'member':
        return 'Meu Dashboard';
      default:
        return 'Dashboard Admin';
    }
  };

  // üìã VALIDA√á√ÉO: M√≥dulos v√°lidos por role
  const getValidModulesForRole = (userRole: string): string[] => {
    switch (userRole) {
      case 'super_admin':
        return ['Dashboard Admin', 'Relat√≥rio', 'Feedback', 'Clientes', 'Configura√ß√µes da Plataforma', 'Notifica√ß√µes'];
      case 'admin':
        return ['Dashboard Admin', 'Vendedores', 'Gest√£o de pipeline', 'Gest√£o de formul√°rios', 'Acompanhamento', 'Leads', 'Integra√ß√µes'];
      case 'member':
        return ['Meu Dashboard', 'Pipeline', 'Gest√£o de pipeline', 'Leads', 'Acompanhamento'];
      default:
        return ['Dashboard Admin'];
    }
  };

  // üîç VALIDA√á√ÉO: Verificar se m√≥dulo salvo √© v√°lido para o role atual
  const isModuleValidForRole = (moduleName: string, userRole: string): boolean => {
    const validModules = getValidModulesForRole(userRole);
    return validModules.includes(moduleName);
  };

  // üîÑ PERSIST√äNCIA: Estado com recupera√ß√£o autom√°tica otimizada
  const [activeModule, setActiveModule] = useState(() => {
    // Durante a inicializa√ß√£o, usar um valor padr√£o tempor√°rio
    // O valor correto ser√° definido no useEffect quando o user estiver dispon√≠vel
    return 'Dashboard Admin';
  });

  // üîÑ PERSIST√äNCIA: Salvar m√≥dulo ativo sempre que mudar (useCallback para evitar re-renders)
  const handleNavigateWithPersistence = useCallback((moduleName: string) => {
    console.log(`üìç Navegando para: ${moduleName}`);
    
    try {
      // Salvar no localStorage
      localStorage.setItem('crm_active_module', moduleName);
      
      // Atualizar estado
      setActiveModule(moduleName);
      
      console.log(`‚úÖ M√≥dulo '${moduleName}' salvo com sucesso`);
    } catch (error) {
      console.error('Erro ao salvar m√≥dulo ativo:', error);
      // Mesmo com erro, atualizar o estado
      setActiveModule(moduleName);
    }
  }, []);

  // üîÑ PERSIST√äNCIA: Sincronizar com mudan√ßas de usu√°rio (corrigido para evitar loop)
  useEffect(() => {
    if (user) {
      const savedModule = localStorage.getItem('crm_active_module');
      const defaultModule = getDefaultModule(user.role);
      
      console.log(`üîÑ Usu√°rio dispon√≠vel (${user.role})`);
      console.log(`üì¶ M√≥dulo salvo: ${savedModule || 'nenhum'}`);
      console.log(`üéØ M√≥dulo padr√£o para role: ${defaultModule}`);
      
      // Verificar se o m√≥dulo salvo √© v√°lido para o role atual
      if (savedModule && isModuleValidForRole(savedModule, user.role)) {
        console.log(`‚úÖ M√≥dulo salvo '${savedModule}' √© v√°lido para role '${user.role}' - mantendo`);
        setActiveModule(savedModule);
      } else {
        if (savedModule) {
          console.log(`‚ö†Ô∏è M√≥dulo salvo '${savedModule}' n√£o √© v√°lido para role '${user.role}' - usando padr√£o`);
        }
        console.log(`üîÑ Definindo m√≥dulo padr√£o: ${defaultModule}`);
        localStorage.setItem('crm_active_module', defaultModule);
        setActiveModule(defaultModule);
      }
    }
  }, [user?.id, user?.role]); // Depend√™ncias espec√≠ficas para evitar loops

  // üßπ LIMPEZA: Limpar m√≥dulo ativo no logout
  const handleLogout = async () => {
    try {
      logger.info('Iniciando processo de logout', 'AppDashboard');
      
      // Limpar m√≥dulo ativo do localStorage
      localStorage.removeItem('crm_active_module');
      console.log('üßπ M√≥dulo ativo limpo do localStorage');
      
      await logout();
      logger.info('Logout conclu√≠do, redirecionando', 'AppDashboard');
      navigate('/login');
    } catch (error) {
      logger.error('Erro durante logout', 'AppDashboard', error);
      // For√ßar redirecionamento mesmo em caso de erro
      window.location.href = '/login';
    }
  };

  if (!user) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-blue-600"></div>
      </div>
    );
  }

  return (
    <CRMLayout 
      user={user} 
      onLogout={handleLogout}
      activeModule={activeModule}
      onNavigate={handleNavigateWithPersistence}
    >
      <RoleBasedMenu 
        selectedItem={activeModule}
        userRole={user?.role || 'member'}
      />
    </CRMLayout>
  );
};

export default AppDashboard;

