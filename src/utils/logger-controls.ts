// ============================================
// UTILIT√ÅRIOS DE CONTROLE DE LOGS PARA CONSOLE
// ============================================
// Para usar no console do navegador:
// window.logControls.reducePipelineLogs()
// window.logControls.debugMode()
// etc.

import { logger, smartLogControl, showLoggerStatus, resetToDefaults } from './logger';

declare global {
  interface Window {
    logControls: typeof logControls;
    logger: typeof logger;
  }
}

// ‚úÖ CONTROLES PRINCIPAIS DE LOGGING
export const logControls = {
  // Controles de n√≠vel
  silent: () => {
    logger.setLevel('none');
    console.log('üîá SIL√äNCIO TOTAL - Todos os logs desabilitados');
  },
  
  errorsOnly: () => {
    logger.setLevel('error');
    console.log('üö® APENAS ERRORS - N√≠vel de log mais restritivo');
  },
  
  warningsOnly: () => {
    logger.setLevel('warn');
    console.log('‚ö†Ô∏è WARNINGS E ERRORS - N√≠vel balanceado para produ√ß√£o');
  },
  
  infoMode: () => {
    logger.setLevel('info');
    console.log('‚ÑπÔ∏è INFO MODE - Informa√ß√µes importantes + warnings + errors');
  },
  
  debugMode: () => {
    logger.setLevel('debug');
    console.log('üêõ DEBUG MODE - Logs detalhados para desenvolvimento');
  },
  
  verboseMode: () => {
    logger.setLevel('silly');
    console.log('üîß VERBOSE MODE - Todos os logs incluindo internos');
  },
  
  // Controles espec√≠ficos para problemas
  reducePipelineLogs: smartLogControl.reducePipelineLogs,
  cleanDevMode: smartLogControl.cleanDevMode,
  debugApiIssues: smartLogControl.debugApiIssues,
  temporarySilence: smartLogControl.temporarySilence,
  
  // Controles para situa√ß√µes espec√≠ficas
  onlyShowErrors: () => {
    logger.setLevel('error');
    console.log('üö® Apenas ERRORS vis√≠veis - para focar em problemas cr√≠ticos');
  },
  
  showImportantOnly: () => {
    logger.setLevel('warn');
    console.log('üì¢ Apenas logs IMPORTANTES - warnings e errors');
  },
  
  normalMode: () => {
    logger.setLevel('info');
    console.log('‚úÖ MODO NORMAL - info, warnings e errors');
  },
  
  // Utilit√°rios
  status: showLoggerStatus,
  reset: resetToDefaults,
  
  // Para debugging de componentes espec√≠ficos
  debugPipeline: () => {
    logger.setLevel('debug');
    console.log('üèóÔ∏è DEBUG PIPELINE - Logs detalhados para m√≥dulo de pipeline');
  },
  
  debugLeadTasks: () => {
    logger.setLevel('debug');
    console.log('üìã DEBUG LEAD TASKS - Logs detalhados para tarefas de leads');
  },
  
  debugCORS: () => {
    logger.setLevel('debug');
    console.log('üåê DEBUG CORS - Logs detalhados para problemas de CORS/API');
  },
  
  // Controle de emergency
  emergency: () => {
    logger.setLevel('error');
    console.log('üÜò MODO EMERG√äNCIA - Apenas errors cr√≠ticos, m√°xima performance');
  },
  
  // Para demonstra√ß√µes ou apresenta√ß√µes
  presentationMode: () => {
    logger.setLevel('none');
    console.log('üéØ MODO APRESENTA√á√ÉO - Console limpo para demos');
  },
  
  // Helpers
  help: () => {
    console.log(`
üéõÔ∏è CONTROLES DE LOG DISPON√çVEIS:

üìä N√çVEIS:
  logControls.silent()         - Sem logs
  logControls.errorsOnly()     - Apenas errors
  logControls.warningsOnly()   - Warnings + errors  
  logControls.infoMode()       - Info + warnings + errors
  logControls.debugMode()      - Debug detalhado
  logControls.verboseMode()    - Tudo incluindo internos

üîß ESPEC√çFICOS:
  logControls.debugPipeline()  - Debug m√≥dulo pipeline
  logControls.debugCORS()      - Debug problemas CORS/API
  logControls.cleanDevMode()   - Desenvolvimento limpo
  
‚ö° UTILIT√ÅRIOS:
  logControls.status()         - Ver configura√ß√£o atual
  logControls.reset()          - Voltar ao padr√£o
  logControls.emergency()      - Modo emerg√™ncia
  logControls.presentationMode() - Console limpo

üéØ TEMPOR√ÅRIOS:
  logControls.temporarySilence(60000) - Silenciar por 1min
    `);
  }
};

// ‚úÖ DISPONIBILIZAR NO WINDOW PARA ACESSO VIA CONSOLE
if (typeof window !== 'undefined') {
  window.logControls = logControls;
  window.logger = logger;
  
  // ‚úÖ CONFIGURA√á√ÉO INICIAL INTELIGENTE
  const urlParams = new URLSearchParams(window.location.search);
  const debugParam = urlParams.get('debug');
  
  if (debugParam) {
    switch (debugParam) {
      case 'pipeline':
        logControls.debugPipeline();
        break;
      case 'cors':
      case 'api':
        logControls.debugCORS();
        break;
      case 'clean':
        logControls.cleanDevMode();
        break;
      case 'silent':
        logControls.silent();
        break;
      case 'verbose':
        logControls.verboseMode();
        break;
      default:
        logControls.debugMode();
    }
  }
  
  // ‚úÖ MOSTRAR AJUDA INICIAL EM DESENVOLVIMENTO
  if (import.meta.env.DEV) {
    console.log('üéõÔ∏è Log controls dispon√≠veis! Digite: logControls.help()');
  }
}

export default logControls;