#!/usr/bin/env node

const { createClient } = require('@supabase/supabase-js');

console.log('üîç DIAGN√ìSTICO COMPLETO DO MCP SUPABASE');
console.log('=====================================\n');

// Configura√ß√£o
const SUPABASE_URL = process.env.SUPABASE_URL || 'https://marajvabdwkpgopytvhh.supabase.co';
const SUPABASE_KEY = process.env.SUPABASE_SERVICE_ROLE_KEY;

console.log('1. üìã VERIFICANDO CONFIGURA√á√ÉO:');
console.log(`   URL: ${SUPABASE_URL}`);
console.log(`   Chave: ${SUPABASE_KEY ? 'CONFIGURADA ‚úÖ' : 'FALTANDO ‚ùå'}`);

if (!SUPABASE_KEY) {
  console.log('\n‚ùå ERRO: Chave service_role n√£o configurada!');
  console.log('\nüìù COMO CORRIGIR:');
  console.log('1. Acesse: https://supabase.com/dashboard');
  console.log('2. V√° para Settings ‚Üí API');
  console.log('3. Copie a chave "service_role" (n√£o "anon")');
  console.log('4. Substitua em .cursor/mcp.json');
  process.exit(1);
}

// Verificar tipo de chave
function verificarTipoChave(key) {
  try {
    const payload = JSON.parse(Buffer.from(key.split('.')[1], 'base64').toString());
    return payload.role;
  } catch (error) {
    return 'inv√°lida';
  }
}

const tipoChave = verificarTipoChave(SUPABASE_KEY);
console.log(`   Tipo de chave: ${tipoChave}`);

if (tipoChave === 'anon') {
  console.log('\n‚ö†Ô∏è  AVISO: Voc√™ est√° usando uma chave "anon"!');
  console.log('   Para MCP, voc√™ precisa da chave "service_role"');
  console.log('   Chave "anon" tem permiss√µes limitadas');
}

console.log('\n2. üîå TESTANDO CONEX√ÉO COM SUPABASE:');

async function testarConexao() {
  try {
    const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
    
    console.log('   Criando cliente...');
    
    // Teste b√°sico de conex√£o
    const { data, error } = await supabase.from('users').select('count').limit(1);
    
    if (error && error.code !== 'PGRST116') {
      console.log(`   ‚ùå Erro: ${error.message}`);
      return false;
    }
    
    console.log('   ‚úÖ Conex√£o estabelecida!');
    return true;
    
  } catch (error) {
    console.log(`   ‚ùå Erro de conex√£o: ${error.message}`);
    return false;
  }
}

async function testarTabelas() {
  console.log('\n3. üìä TESTANDO ACESSO A TABELAS:');
  
  const supabase = createClient(SUPABASE_URL, SUPABASE_KEY);
  
  const tabelas = ['users', 'companies', 'leads', 'pipelines', 'custom_fields'];
  
  for (const tabela of tabelas) {
    try {
      const { data, error } = await supabase.from(tabela).select('*').limit(1);
      
      if (error) {
        console.log(`   ${tabela}: ‚ùå ${error.message}`);
      } else {
        console.log(`   ${tabela}: ‚úÖ OK (${data.length} registros vis√≠veis)`);
      }
    } catch (error) {
      console.log(`   ${tabela}: ‚ùå ${error.message}`);
    }
  }
}

async function testarMCP() {
  console.log('\n4. üîß TESTANDO SERVIDOR MCP:');
  
  try {
    // Simular o que o servidor MCP faz
    const tools = [
      'listar_tabelas',
      'consultar_dados', 
      'inserir_dados',
      'atualizar_dados',
      'deletar_dados'
    ];
    
    console.log(`   ‚úÖ ${tools.length} ferramentas dispon√≠veis:`);
    tools.forEach(tool => console.log(`      - ${tool}`));
    
    return true;
  } catch (error) {
    console.log(`   ‚ùå Erro no MCP: ${error.message}`);
    return false;
  }
}

async function verificarArquivos() {
  console.log('\n5. üìÅ VERIFICANDO ARQUIVOS:');
  
  const fs = require('fs');
  const path = require('path');
  
  const arquivos = [
    'supabase-mcp-novo.js',
    '.cursor/mcp.json',
    'package.json'
  ];
  
  for (const arquivo of arquivos) {
    if (fs.existsSync(arquivo)) {
      console.log(`   ${arquivo}: ‚úÖ Existe`);
    } else {
      console.log(`   ${arquivo}: ‚ùå N√£o encontrado`);
    }
  }
}

async function main() {
  await verificarArquivos();
  
  const conexaoOK = await testarConexao();
  if (!conexaoOK) {
    console.log('\n‚ùå Falha na conex√£o - verifique suas credenciais');
    return;
  }
  
  await testarTabelas();
  await testarMCP();
  
  console.log('\n6. üéØ PR√ìXIMOS PASSOS:');
  console.log('   1. Substitua a chave service_role em .cursor/mcp.json');
  console.log('   2. Reinicie o Cursor COMPLETAMENTE');
  console.log('   3. V√° para Cursor ‚Üí Settings ‚Üí MCP Tools');
  console.log('   4. Verifique se aparece "supabase" com bolinha verde');
  
  console.log('\n‚úÖ DIAGN√ìSTICO CONCLU√çDO!');
}

main().catch(console.error); 