// Sistema de Logger Centralizado com N√≠veis de Verbosidade

type LogLevel = 'error' | 'warn' | 'info' | 'debug' | 'silent';

interface LoggerConfig {
  level: LogLevel;
  enableColors: boolean;
  enableTimestamp: boolean;
}

class Logger {
  private config: LoggerConfig;
  private logLevels: Record<LogLevel, number> = {
    silent: 0,
    error: 1,
    warn: 2,
    info: 3,
    debug: 4
  };

  constructor() {
    // üîß CONFIGURA√á√ÉO POR AMBIENTE
    const envLogLevel = import.meta.env.VITE_LOG_LEVEL as LogLevel;
    const isDev = import.meta.env.DEV;
    const isDebugMode = import.meta.env.VITE_DEBUG_MODE === 'true';

    // Determinar n√≠vel de log baseado no ambiente
    let defaultLevel: LogLevel = 'info';
    if (isDebugMode) {
      defaultLevel = 'debug';
    } else if (isDev) {
      defaultLevel = 'warn';
    } else {
      defaultLevel = 'error'; // Produ√ß√£o: apenas erros
    }

    this.config = {
      level: envLogLevel || defaultLevel,
      enableColors: isDev,
      enableTimestamp: isDev
    };
  }

  private shouldLog(level: LogLevel): boolean {
    return this.logLevels[level] <= this.logLevels[this.config.level];
  }

  private formatMessage(level: LogLevel, message: string, context?: string): string {
    let formatted = '';
    
    if (this.config.enableTimestamp) {
      formatted += `[${new Date().toLocaleTimeString()}] `;
    }

    if (this.config.enableColors) {
      const colors = {
        error: 'üö®',
        warn: '‚ö†Ô∏è',
        info: '‚ÑπÔ∏è',
        debug: 'üêõ',
        silent: ''
      };
      formatted += `${colors[level]} `;
    }

    if (context) {
      formatted += `[${context}] `;
    }

    formatted += message;
    return formatted;
  }

  // üö® LOGS CR√çTICOS - Sempre vis√≠veis
  error(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('error')) {
      console.error(this.formatMessage('error', message, context), ...args);
    }
  }

  // ‚ö†Ô∏è LOGS DE AVISO - Vis√≠veis em dev e debug
  warn(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('warn')) {
      console.warn(this.formatMessage('warn', message, context), ...args);
    }
  }

  // ‚ÑπÔ∏è LOGS INFORMATIVOS - Vis√≠veis em info e debug
  info(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('info')) {
      console.log(this.formatMessage('info', message, context), ...args);
    }
  }

  // üêõ LOGS DE DEBUG - Apenas em modo debug
  debug(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('debug')) {
      console.log(this.formatMessage('debug', message, context), ...args);
    }
  }

  // üìä LOGS DE PERFORMANCE - Condicionais
  performance(message: string, context?: string, ...args: any[]): void {
    if (import.meta.env.VITE_DEBUG_MODE === 'true') {
      console.log(this.formatMessage('debug', `[PERF] ${message}`, context), ...args);
    }
  }

  // üîÑ LOGS DE SISTEMA - Importantes mas control√°veis
  system(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('info')) {
      console.log(this.formatMessage('info', `[SYSTEM] ${message}`, context), ...args);
    }
  }

  // üîê LOGS DE AUTH - Seguros e control√°veis
  auth(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('info')) {
      console.log(this.formatMessage('info', `[AUTH] ${message}`, context), ...args);
    }
  }

  // üì° LOGS DE API - Para debugging de requests
  api(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('debug')) {
      console.log(this.formatMessage('debug', `[API] ${message}`, context), ...args);
    }
  }

  // üéØ LOGS DE PIPELINE - Espec√≠ficos para pipeline
  pipeline(message: string, context?: string, ...args: any[]): void {
    if (this.shouldLog('debug')) {
      console.log(this.formatMessage('debug', `[PIPELINE] ${message}`, context), ...args);
    }
  }

  // üìà M√©todo para obter configura√ß√£o atual
  getConfig(): LoggerConfig {
    return { ...this.config };
  }

  // üîß M√©todo para alterar n√≠vel de log em runtime
  setLevel(level: LogLevel): void {
    this.config.level = level;
    this.info(`Log level alterado para: ${level}`, 'LOGGER');
  }
}

// Inst√¢ncia singleton do logger
export const logger = new Logger();

// Exports para compatibilidade
export default logger;

// üîß UTILIT√ÅRIOS PARA DESENVOLVIMENTO
export const enableDebugLogs = () => {
  logger.setLevel('debug');
  logger.debug('Modo debug ativado - todos os logs vis√≠veis', 'LOGGER');
};

export const enableProductionLogs = () => {
  logger.setLevel('error');
  logger.warn('Modo produ√ß√£o ativado - apenas erros vis√≠veis', 'LOGGER');
};

export const showLoggerInfo = () => {
  const config = logger.getConfig();
  logger.info(`Logger configurado: ${JSON.stringify(config)}`, 'LOGGER');
}; 