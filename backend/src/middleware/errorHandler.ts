import { Request, Response, NextFunction } from 'express';
import { ApiResponse } from '../types/express';

/**
 * ‚úÖ ENHANCED ERROR HANDLER BASEADO EM CONTEXT7 EXPRESS.JS DOCS
 * Middleware com 4-argument signature conforme padr√µes oficiais Express.js
 * Captura e padroniza todos os erros da aplica√ß√£o com tratamento espec√≠fico para APIs
 */
export function errorHandler(
  err: any,
  req: Request,
  res: Response,
  next: NextFunction
): void {
  // ‚úÖ CORRE√á√ÉO ESPEC√çFICA: Detectar erros de distribui√ß√£o e cad√™ncia
  const isDistributionAPI = req.path.includes('/distribution-stats') || req.path.includes('/pipelines');
  const isCadenceAPI = req.path.includes('/cadence');
  
  // Log do erro para monitoramento com contexto espec√≠fico
  console.error('üö® [ErrorHandler] Erro capturado:', {
    error: err.message,
    stack: err.stack,
    url: req.url,
    method: req.method,
    user: req.user?.email || 'N√£o autenticado',
    timestamp: new Date().toISOString(),
    body: req.body,
    query: req.query,
    params: req.params,
    // ‚úÖ NOVO: Contexto espec√≠fico para debugging
    errorContext: {
      isDistributionAPI,
      isCadenceAPI,
      apiPath: req.path,
      statusCodeHint: err.statusCode || err.status || 500
    }
  });

  // Resposta padr√£o de erro
  const response: ApiResponse = {
    success: false,
    timestamp: new Date().toISOString()
  };

  // ‚úÖ MELHORADO: Determinar status code e mensagem com tratamento espec√≠fico para APIs
  let statusCode = 500;

  // ‚úÖ NOVO: Tratamento espec√≠fico para APIs de distribui√ß√£o
  if (isDistributionAPI) {
    console.log('üî• [ErrorHandler] Tratando erro espec√≠fico de Distribution API');
    statusCode = err.statusCode || err.status || 500;
    response.error = 'Distribution API Error';
    response.message = err.message || 'Erro ao calcular estat√≠sticas de distribui√ß√£o';
    
    // Adicionar dicas de corre√ß√£o para erros comuns
    if (statusCode === 400) {
      response.message = 'Par√¢metros inv√°lidos para c√°lculo de distribui√ß√£o. Verifique pipeline_id.';
    } else if (statusCode === 404) {
      response.message = 'Pipeline n√£o encontrado para c√°lculo de distribui√ß√£o.';
    }
  }
  // ‚úÖ NOVO: Tratamento espec√≠fico para APIs de cad√™ncia
  else if (isCadenceAPI) {
    console.log('üîÑ [ErrorHandler] Tratando erro espec√≠fico de Cadence API');
    statusCode = err.statusCode || err.status || 500;
    response.error = 'Cadence API Error';
    response.message = err.message || 'Erro no sistema de cad√™ncia';
    
    // Adicionar dicas de corre√ß√£o para erros comuns
    if (statusCode === 400) {
      response.message = 'Dados de cad√™ncia inv√°lidos. Verifique estrutura de tasks e configura√ß√£o.';
    } else if (statusCode === 404) {
      response.message = 'Configura√ß√£o de cad√™ncia n√£o encontrada.';
    }
  }
  // ‚úÖ MANTIDO: Tratamento padr√£o para outros erros
  else if (err.name === 'ValidationError') {
    statusCode = 400;
    response.error = 'Dados inv√°lidos';
    response.message = err.message;
  } else if (err.name === 'UnauthorizedError' || err.message.includes('token')) {
    statusCode = 401;
    response.error = 'N√£o autorizado';
    response.message = 'Token de acesso inv√°lido ou expirado';
  } else if (err.name === 'ForbiddenError') {
    statusCode = 403;
    response.error = 'Acesso negado';
    response.message = 'Voc√™ n√£o tem permiss√£o para acessar este recurso';
  } else if (err.name === 'NotFoundError') {
    statusCode = 404;
    response.error = 'Recurso n√£o encontrado';
    response.message = err.message || 'O recurso solicitado n√£o foi encontrado';
  } else if (err.name === 'ConflictError') {
    statusCode = 409;
    response.error = 'Conflito';
    response.message = err.message || 'Recurso j√° existe';
  } else if (err.code === 'LIMIT_FILE_SIZE') {
    statusCode = 413;
    response.error = 'Arquivo muito grande';
    response.message = 'O arquivo enviado excede o limite permitido';
  } else if (err.type === 'entity.parse.failed') {
    statusCode = 400;
    response.error = 'JSON inv√°lido';
    response.message = 'Formato JSON malformado';
  } else if (err.message === 'N√£o permitido pelo CORS') {
    statusCode = 403;
    response.error = 'CORS bloqueado';
    response.message = 'Origem n√£o permitida pela pol√≠tica CORS';
  } else if (err.code === 'EBADCSRFTOKEN') {
    statusCode = 403;
    response.error = 'Token CSRF inv√°lido';
    response.message = 'Token de seguran√ßa inv√°lido';
  } else {
    // Erro gen√©rico
    response.error = 'Erro interno do servidor';
    response.message = process.env.NODE_ENV === 'development' 
      ? err.message 
      : 'Erro interno. Tente novamente mais tarde.';
  }

  // Adicionar detalhes extras em desenvolvimento
  if (process.env.NODE_ENV === 'development') {
    (response as any).debug = {
      stack: err.stack,
      timestamp: new Date().toISOString(),
      url: req.url,
      method: req.method
    };
  }

  // Responder com erro
  res.status(statusCode).json(response);
}

/**
 * Wrapper para async functions
 * Evita try/catch repetitivo em rotas async
 */
export function asyncHandler(fn: Function) {
  return (req: Request, res: Response, next: NextFunction) => {
    Promise.resolve(fn(req, res, next)).catch(next);
  };
}

/**
 * Criar erro customizado
 */
export class AppError extends Error {
  public statusCode: number;
  public isOperational: boolean;

  constructor(message: string, statusCode: number = 500) {
    super(message);
    this.statusCode = statusCode;
    this.isOperational = true;

    Error.captureStackTrace(this, this.constructor);
  }
}

/**
 * Erros espec√≠ficos
 */
export class ValidationError extends AppError {
  constructor(message: string) {
    super(message, 400);
    this.name = 'ValidationError';
  }
}

export class UnauthorizedError extends AppError {
  constructor(message: string = 'N√£o autorizado') {
    super(message, 401);
    this.name = 'UnauthorizedError';
  }
}

export class ForbiddenError extends AppError {
  constructor(message: string = 'Acesso negado') {
    super(message, 403);
    this.name = 'ForbiddenError';
  }
}

export class NotFoundError extends AppError {
  constructor(message: string = 'Recurso n√£o encontrado') {
    super(message, 404);
    this.name = 'NotFoundError';
  }
}

export class ConflictError extends AppError {
  constructor(message: string = 'Recurso j√° existe') {
    super(message, 409);
    this.name = 'ConflictError';
  }
} 