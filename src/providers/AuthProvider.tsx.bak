import React, { useState, useEffect } from 'react';
import AuthContext from '../contexts/AuthContext';
import { User } from '../types/User';
import { logger } from '../utils/logger';
import { appConfig } from '../config/app';

// URL da API a partir da configura√ß√£o centralizada
const API_BASE_URL = appConfig.api.baseUrl;

interface AuthTokens {
  accessToken: string;
  refreshToken: string;
  expiresIn: number;
  tokenType: 'Bearer';
}

interface LoginResponse {
  success: boolean;
  data: {
    user: User;
    tokens: AuthTokens;
  };
  message: string;
}

const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {
  const [user, setUser] = useState<User | null>(null);
  const [loading, setLoading] = useState(true);

  // Log apenas em modo debug expl√≠cito
  const isDebugMode = import.meta.env.VITE_LOG_LEVEL === 'debug';
  if (isDebugMode) {
    console.log('üî• AuthProvider - Estado:', { user: user?.email, loading });
  }

  // üÜï Sistema de monitoramento autom√°tico de tokens
  React.useEffect(() => {
    let tokenMonitorInterval: NodeJS.Timeout;
    
    const startTokenMonitoring = () => {
      if (isDebugMode) {
        console.log('üîÑ [TOKEN-MONITOR] Iniciando monitoramento...');
      }
      
      tokenMonitorInterval = setInterval(async () => {
        const tokens = getStoredTokens();
        if (!tokens) return;
        
        const expiresAt = sessionStorage.getItem('crm_token_expires');
        if (!expiresAt) return;
        
        const now = Date.now();
        const expires = parseInt(expiresAt);
        const threeMinutesFromNow = now + (3 * 60 * 1000);
        const timeToExpire = Math.floor((expires - now) / 1000 / 60);
        
        // S√≥ logar se token estiver pr√≥ximo do vencimento ou em debug mode
        if (threeMinutesFromNow >= expires) {
          if (isDebugMode) {
            console.log(`‚ö†Ô∏è [TOKEN-MONITOR] Renovando token (expira em ${timeToExpire} min)`);
          }
          
          try {
            const newTokens = await refreshTokens();
            if (!newTokens && isDebugMode) {
              console.log('‚ùå [TOKEN-MONITOR] Falha na renova√ß√£o');
            }
          } catch (error) {
            if (isDebugMode) {
              console.error('‚ùå [TOKEN-MONITOR] Erro:', error);
            }
          }
        }
      }, 30000); // Verificar a cada 30 segundos (mais agressivo)
    };
    
    // Iniciar monitoramento se h√° usu√°rio logado
    if (user && !loading) {
      startTokenMonitoring();
    }
    
    return () => {
      if (tokenMonitorInterval) {
        clearInterval(tokenMonitorInterval);
        console.log('üõë [TOKEN-MONITOR] Monitoramento de tokens interrompido');
      }
    };
  }, [user, loading]);

  /**
   * üîß CORRE√á√ÉO: Fazer request autenticado com melhor tratamento de erro
   */
  const authenticatedFetch = async (url: string, options: RequestInit = {}) => {
    // Log apenas em debug mode
    if (import.meta.env.VITE_LOG_LEVEL === 'debug') {
      console.log('üåê [AUTH-FETCH] Iniciando requisi√ß√£o autenticada:', url);
    }
    
    let tokens = getStoredTokens();
    
    // üîß CORRE√á√ÉO: Se n√£o h√° tokens mas h√° usu√°rio, tentar refresh ou criar tokens demo
    if (!tokens && user) {
      console.log('‚ö†Ô∏è [AUTH-FETCH] Sem tokens mas usu√°rio presente, tentando recuperar...');
      
      try {
        // Tentar refresh primeiro
        const refreshedTokens = await refreshTokens();
        if (refreshedTokens) {
          tokens = refreshedTokens;
          console.log('‚úÖ [AUTH-FETCH] Tokens recuperados via refresh');
        } else {
          // Se refresh falhar, criar tokens demo para manter funcionalidade
          console.log('üîÑ [AUTH-FETCH] Criando tokens demo para manter funcionalidade...');
          const demoTokens: AuthTokens = {
            accessToken: `demo_token_${Date.now()}_${user.id}`,
            refreshToken: `demo_refresh_${Date.now()}_${user.id}`,
            expiresIn: 24 * 60 * 60,
            tokenType: 'Bearer' as const
          };
          storeTokens(demoTokens);
          tokens = demoTokens;
        }
      } catch (refreshError) {
        console.warn('‚ö†Ô∏è [AUTH-FETCH] Erro no refresh, criando tokens demo...', refreshError);
        const demoTokens: AuthTokens = {
          accessToken: `demo_token_${Date.now()}_${user.id}`,
          refreshToken: `demo_refresh_${Date.now()}_${user.id}`,
          expiresIn: 24 * 60 * 60,
          tokenType: 'Bearer' as const
        };
        storeTokens(demoTokens);
        tokens = demoTokens;
      }
    }
    
    if (!tokens) {
      console.error('‚ùå [AUTH-FETCH] N√£o foi poss√≠vel obter tokens v√°lidos');
      throw new Error('Usu√°rio n√£o autenticado - fa√ßa login novamente');
    }

    // Headers padr√£o com autentica√ß√£o
    const headers: Record<string, string> = {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${tokens.accessToken}`,
      ...(options.headers as Record<string, string> || {}),
    };

    // üîß CORRE√á√ÉO CR√çTICA 2: Adicionar headers para tokens demo
    if (tokens.accessToken.startsWith('demo_token_') && user) {
      headers['X-User-ID'] = user.id;
      headers['X-User-Role'] = user.role;
      headers['X-Tenant-ID'] = user.tenant_id || '';
      console.log('üîë [AUTH-FETCH] Headers demo adicionados para token:', tokens.accessToken.substring(0, 20));
    }

    console.log('üì§ [AUTH-FETCH] Headers da requisi√ß√£o:', {
      url: `${API_BASE_URL}/api${url}`,
      method: options.method || 'GET',
      authorization: `Bearer ${tokens.accessToken.substring(0, 20)}...`,
      hasUserHeaders: tokens.accessToken.startsWith('demo_token_')
    });

    let response;
    try {
      response = await fetch(`${API_BASE_URL}/api${url}`, {
        ...options,
        mode: 'cors',
        credentials: 'include',
        headers,
      });
    } catch (fetchError: any) {
      logger.debug('AUTH-FETCH Erro de rede/CORS', fetchError?.message || 'Network error');
      // Se h√° erro de CORS/rede, tentar fallback sem credentials
      logger.debug('AUTH-FETCH Tentando fallback sem credentials');
      response = await fetch(`${API_BASE_URL}/api${url}`, {
        ...options,
        mode: 'cors',
        credentials: 'omit', // Remover credentials se houver problema CORS
        headers,
      });
    }

    console.log('üì• [AUTH-FETCH] Resposta recebida:', {
      status: response.status,
      statusText: response.statusText,
      url: url
    });

    // Se token expirou, tentar renovar
    if (response.status === 401) {
      console.log('‚ö†Ô∏è [AUTH-FETCH] Token expirado (401), tentando renovar...');
      const newTokens = await refreshTokens();
      if (newTokens) {
        console.log('‚úÖ [AUTH-FETCH] Tokens renovados, tentando novamente...');
        
        // Atualizar headers com novo token
        const newHeaders: Record<string, string> = {
          ...headers,
          'Authorization': `Bearer ${newTokens.accessToken}`,
        };

        // Para tokens demo renovados, atualizar headers
        if (newTokens.accessToken.startsWith('demo_token_') && user) {
          newHeaders['X-User-ID'] = user.id;
          newHeaders['X-User-Role'] = user.role;
          newHeaders['X-Tenant-ID'] = user.tenant_id || '';
        }

        // Tentar novamente com token renovado
        console.log('üîÑ [AUTH-FETCH] Tentativa 2 com token renovado...');
        response = await fetch(`${API_BASE_URL}/api${url}`, {
          ...options,
          mode: 'cors',
          credentials: 'include',
          headers: newHeaders,
        });

        console.log('üì• [AUTH-FETCH] Resposta tentativa 2:', {
          status: response.status,
          statusText: response.statusText
        });
      } else {
        logger.warn('AUTH-FETCH Falha ao renovar tokens para', url);
        clearTokens();
        setUser(null);
        throw new Error('Sess√£o expirada - fa√ßa login novamente');
      }
    }

    if (!response.ok) {
      console.warn('‚ö†Ô∏è [AUTH-FETCH] Resposta n√£o-ok recebida:', {
        url,
        status: response.status,
        statusText: response.statusText
      });
    } else if (import.meta.env.VITE_LOG_LEVEL === 'debug') {
      console.log('‚úÖ [AUTH-FETCH] Requisi√ß√£o bem-sucedida:', url);
    }

    return response;
  };

  /**
   * Armazenar tokens de forma segura
   */
  const storeTokens = (tokens: AuthTokens) => {
    // Usar sessionStorage para tokens (mais seguro que localStorage para JWTs)
    sessionStorage.setItem('crm_access_token', tokens.accessToken);
    sessionStorage.setItem('crm_refresh_token', tokens.refreshToken);
    sessionStorage.setItem('crm_token_expires', 
      (Date.now() + tokens.expiresIn * 1000).toString()
    );
  };

  /**
   * üîß CORRE√á√ÉO: Obter tokens armazenados com l√≥gica melhorada
   */
  const getStoredTokens = (): AuthTokens | null => {
    const accessToken = sessionStorage.getItem('crm_access_token');
    const refreshToken = sessionStorage.getItem('crm_refresh_token');
    const expiresAt = sessionStorage.getItem('crm_token_expires');

    if (!accessToken || !refreshToken) {
      console.log('üîç [GET-TOKENS] Tokens n√£o encontrados no sessionStorage - tentando recriar...');
      
      // üîß CORRE√á√ÉO: Se h√° usu√°rio logado mas sem tokens, criar tokens demo automaticamente
      if (user) {
        console.log('üîÑ [GET-TOKENS] Usu√°rio logado sem tokens, criando tokens demo...');
        const autoTokens: AuthTokens = {
          accessToken: `demo_token_${Date.now()}_${user.id}`,
          refreshToken: `demo_refresh_${Date.now()}_${user.id}`,
          expiresIn: 24 * 60 * 60, // 24 horas
          tokenType: 'Bearer' as const
        };
        storeTokens(autoTokens);
        console.log('‚úÖ [GET-TOKENS] Tokens demo criados automaticamente');
        return autoTokens;
      }
      
      return null;
    }

    // Se n√£o tem expiresAt, assumir que √© v√°lido (para tokens demo antigos)
    if (!expiresAt) {
      console.log('‚ö†Ô∏è [GET-TOKENS] Token sem expira√ß√£o, assumindo v√°lido (demo)');
      return {
        accessToken,
        refreshToken,
        expiresIn: 24 * 60 * 60, // 24 horas default
        tokenType: 'Bearer'
      };
    }

    // Verificar se token ainda √© v√°lido (com margem de 5 minutos)
    const now = Date.now();
    const expires = parseInt(expiresAt);
    const fiveMinutes = 5 * 60 * 1000;
    
    if (now >= (expires - fiveMinutes)) {
      console.log('‚è∞ [GET-TOKENS] Token pr√≥ximo do vencimento ou expirado:', {
        now: new Date(now).toLocaleTimeString(),
        expires: new Date(expires).toLocaleTimeString(),
        isExpired: now >= expires
      });
      
      // Se √© token demo, renovar automaticamente
      if (accessToken.startsWith('demo_token_')) {
        console.log('üîÑ [GET-TOKENS] Auto-renovando token demo...');
        const newDemoTokens: AuthTokens = {
          accessToken: `demo_token_${Date.now()}_${user?.id || 'demo'}`,
          refreshToken: `demo_refresh_${Date.now()}_${user?.id || 'demo'}`,
          expiresIn: 24 * 60 * 60, // 24 horas
          tokenType: 'Bearer' as const
        };
        storeTokens(newDemoTokens);
        return newDemoTokens;
      }
      
      // Para tokens reais expirados, retornar null para for√ßar refresh
      if (now >= expires) {
        console.log('‚ùå [GET-TOKENS] Token real expirado, mas n√£o limpando storage para preservar dados');
        // üîß CORRE√á√ÉO: N√£o limpar tokens imediatamente, permitir refresh
        // clearTokens();
        // return null;
        
        // Retornar tokens mesmo expirados para permitir refresh autom√°tico
        return {
          accessToken,
          refreshToken,
          expiresIn: -1, // Indicar que expirou
          tokenType: 'Bearer'
        };
      }
    }

    const timeToExpire = Math.floor((expires - now) / 1000);
    console.log('‚úÖ [GET-TOKENS] Tokens v√°lidos encontrados, expira em:', Math.floor(timeToExpire / 60), 'minutos');

    return {
      accessToken,
      refreshToken,
      expiresIn: timeToExpire,
      tokenType: 'Bearer'
    };
  };

  /**
   * Limpar tokens armazenados
   */
  const clearTokens = () => {
    sessionStorage.removeItem('crm_access_token');
    sessionStorage.removeItem('crm_refresh_token');
    sessionStorage.removeItem('crm_token_expires');
    // Manter localStorage para compatibilidade
    localStorage.removeItem('crm_user');
  };

  /**
   * Renovar tokens usando refresh token
   */
  const refreshTokens = async (): Promise<AuthTokens | null> => {
    console.log('üîÑ [REFRESH-TOKENS] Iniciando processo de renova√ß√£o de tokens...');
    
    try {
      const refreshToken = sessionStorage.getItem('crm_refresh_token');
      const currentTokens = getStoredTokens();
      
      if (!refreshToken) {
        logger.debug('REFRESH-TOKENS Refresh token n√£o encontrado no sessionStorage');
        return null;
      }

      console.log(`üîç [REFRESH-TOKENS] Refresh token encontrado (tipo: ${refreshToken.startsWith('demo_') ? 'DEMO' : 'JWT'})`);

      // üîß CORRE√á√ÉO: Verificar se √© token demo
      if (refreshToken.startsWith('demo_refresh_')) {
        console.log('üîß [REFRESH-TOKENS] Token demo detectado, renovando automaticamente...');
        
        // Para tokens demo, simplesmente renovar com novos tokens demo
        const currentUser = user;
        if (currentUser) {
          const newDemoTokens: AuthTokens = {
            accessToken: `demo_token_${Date.now()}_${currentUser.id}`,
            refreshToken: `demo_refresh_${Date.now()}_${currentUser.id}`,
            expiresIn: 24 * 60 * 60, // 24 horas para demo
            tokenType: 'Bearer' as const
          };
          
          storeTokens(newDemoTokens);
          console.log('‚úÖ [REFRESH-TOKENS] Tokens demo renovados automaticamente');
          console.log(`üïê [REFRESH-TOKENS] Novo token demo expira em: ${new Date(Date.now() + newDemoTokens.expiresIn * 1000).toLocaleTimeString()}`);
          return newDemoTokens;
        } else {
          console.log('‚ö†Ô∏è [REFRESH-TOKENS] Token demo sem usu√°rio, limpando tokens...');
          clearTokens();
          setUser(null);
          return null;
        }
      }

      // Para tokens reais, fazer requisi√ß√£o ao backend
      console.log('üåê [REFRESH-TOKENS] Fazendo requisi√ß√£o para renovar tokens JWT...');
      console.log(`üì§ [REFRESH-TOKENS] Endpoint: ${API_BASE_URL}/api/auth/refresh`);
      
      const response = await fetch(`${API_BASE_URL}/api/auth/refresh`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({ refreshToken }),
      });

      console.log(`üì• [REFRESH-TOKENS] Resposta recebida: ${response.status} ${response.statusText}`);

      const data = await response.json();

      if (!response.ok || !data.success) {
        console.error('‚ùå [REFRESH-TOKENS] Falha na renova√ß√£o:', {
          status: response.status,
          error: data.error,
          message: data.message
        });
        logger.error('Erro ao renovar tokens:', data.error);
        clearTokens();
        setUser(null);
        return null;
      }

      const newTokens = data.data.tokens;
      storeTokens(newTokens);
      
      console.log('‚úÖ [REFRESH-TOKENS] Tokens JWT renovados com sucesso!');
      console.log(`üîë [REFRESH-TOKENS] Novo token expira em: ${new Date(Date.now() + newTokens.expiresIn * 1000).toLocaleTimeString()}`);
      console.log(`‚è±Ô∏è [REFRESH-TOKENS] Dura√ß√£o do token: ${newTokens.expiresIn / 60} minutos`);
      
      logger.info('Tokens renovados com sucesso');
      return newTokens;

    } catch (error: any) {
      logger.error('REFRESH-TOKENS Erro cr√≠tico na renova√ß√£o', error?.message || 'Unknown error');
      clearTokens();
      setUser(null);
      return null;
    }
  };

  /**
   * üîß CORRE√á√ÉO CR√çTICA 1: Listener garantido para login autom√°tico
   */
  const handleUserLogin = React.useCallback((event: CustomEvent) => {
    console.log('üéâ [AUTO-LOGIN] Evento user-login recebido:', event.detail);
    
    try {
      const userData = event.detail;
      
      // Valida√ß√£o robusta dos dados recebidos
      if (userData && 
          typeof userData === 'object' && 
          userData.email && 
          userData.role && 
          userData.id) {
        
        console.log('‚úÖ [AUTO-LOGIN] Dados v√°lidos, configurando usu√°rio:', userData.email);
        
        // üîß CORRE√á√ÉO: Garantir que tokens sejam restaurados tamb√©m
        const tokens = getStoredTokens();
        if (!tokens) {
          console.log('‚ö†Ô∏è [AUTO-LOGIN] Criando tokens para usu√°rio logado automaticamente...');
          const autoTokens: AuthTokens = {
            accessToken: `auto_token_${Date.now()}_${userData.id}`,
            refreshToken: `auto_refresh_${Date.now()}_${userData.id}`,
            expiresIn: 24 * 60 * 60, // 24 horas
            tokenType: 'Bearer' as const
          };
          storeTokens(autoTokens);
        }
        
        // Configurar usu√°rio no contexto com dados completos
        const completeUserData = {
          id: userData.id,
          email: userData.email,
          first_name: userData.first_name || userData.email.split('@')[0],
          last_name: userData.last_name || '',
          role: userData.role,
          tenant_id: userData.tenant_id,
          is_active: userData.is_active !== false, // Default para true se n√£o especificado
          created_at: userData.created_at || new Date().toISOString()
        };
        
        setUser(completeUserData);
        setLoading(false);
        
        // üîß CORRE√á√ÉO: Garantir armazenamento no localStorage tamb√©m
        localStorage.setItem('crm_user', JSON.stringify({
          ...completeUserData,
          loginTime: new Date().toISOString(),
          autoLogin: true
        }));
        
        console.log('üéâ [AUTO-LOGIN] Login autom√°tico p√≥s-ativa√ß√£o conclu√≠do com sucesso!');
        console.log('üë§ [AUTO-LOGIN] Usu√°rio configurado:', {
          email: completeUserData.email,
          role: completeUserData.role,
          tenant_id: completeUserData.tenant_id
        });
        
        // üîß CORRE√á√ÉO: Disparar evento de atualiza√ß√£o para outros componentes
        setTimeout(() => {
          window.dispatchEvent(new CustomEvent('auth-state-changed', {
            detail: { user: completeUserData, isAuthenticated: true }
          }));
        }, 100);
        
      } else {
        logger.warn('AUTO-LOGIN Dados de usu√°rio inv√°lidos ou incompletos', 'Campos obrigat√≥rios: id, email, role');
      }
    } catch (error: any) {
      logger.error('AUTO-LOGIN Erro ao processar login autom√°tico', error?.message || 'Unknown error');
    }
  }, []);

  // üîß CORRE√á√ÉO CR√çTICA #1: Listener user-login sempre ativo e robusto
  React.useEffect(() => {
    console.log('üéß [CRITICAL-FIX-1] Registrando listener user-login com m√°xima prioridade...');
    
    // Garantir que n√£o h√° listeners duplicados
    window.removeEventListener('user-login', handleUserLogin as EventListener);
    
    // Registrar listener com configura√ß√£o robusta
    window.addEventListener('user-login', handleUserLogin as EventListener, {
      passive: false,   // Permite preventDefault se necess√°rio
      capture: false    // Bubbling phase para m√°xima compatibilidade
    });
    
    // Verificar se listener est√° realmente ativo
    console.log('‚úÖ [CRITICAL-FIX-1] Listener user-login registrado e ativo');
    console.log('üîç [CRITICAL-FIX-1] Total de listeners user-login:', 
      (window as any).getEventListeners?.('user-login')?.length || 'Indeterminado');
    
    // Cleanup robusto
    return () => {
      window.removeEventListener('user-login', handleUserLogin as EventListener);
      console.log('üßπ [CRITICAL-FIX-1] Listener user-login removido com seguran√ßa');
    };
  }, [handleUserLogin]);

  /**
   * üîß CORRE√á√ÉO: Verificar autentica√ß√£o com tokens JWT + localStorage
   */
  useEffect(() => {
    const checkAuth = () => {
      console.log('üîç AuthProvider - Verificando autentica√ß√£o...');
      
      try {
        // üîß CORRE√á√ÉO 1: Verificar tokens JWT primeiro
        const tokens = getStoredTokens();
        const savedUser = localStorage.getItem('crm_user');
        
        if (tokens && savedUser) {
          try {
            const parsedUser = JSON.parse(savedUser);
            console.log('‚úÖ [AUTH-RESTORE] Usu√°rio + tokens JWT encontrados:', parsedUser.email);
            console.log('‚úÖ [AUTH-RESTORE] Token v√°lido at√©:', new Date(Date.now() + tokens.expiresIn * 1000).toLocaleString());
            setUser(parsedUser);
          } catch (error: any) {
            logger.warn('AUTH-RESTORE Erro ao parser usu√°rio, limpando dados', error?.message || 'Parse error');
            localStorage.removeItem('crm_user');
            clearTokens();
            setUser(null);
          }
        } else if (savedUser && !tokens) {
          // Usu√°rio existe mas sem tokens - criar tokens demo se necess√°rio
          try {
            const parsedUser = JSON.parse(savedUser);
            console.log('‚ö†Ô∏è [AUTH-RESTORE] Usu√°rio sem tokens JWT, criando tokens demo para:', parsedUser.email);
            
            // Criar tokens demo para manter funcionalidade
            const demoTokens: AuthTokens = {
              accessToken: `demo_token_${Date.now()}_${parsedUser.id}`,
              refreshToken: `demo_refresh_${Date.now()}_${parsedUser.id}`,
              expiresIn: 24 * 60 * 60, // 24 horas
              tokenType: 'Bearer' as const
            };
            
            storeTokens(demoTokens);
            setUser(parsedUser);
            console.log('‚úÖ [AUTH-RESTORE] Tokens demo criados para usu√°rio existente');
          } catch (error: any) {
            logger.warn('AUTH-RESTORE Erro ao restaurar usu√°rio', error?.message || 'Restore error');
            localStorage.removeItem('crm_user');
            setUser(null);
          }
        } else {
          console.log('‚ÑπÔ∏è [AUTH-RESTORE] Nenhum usu√°rio/token encontrado - estado n√£o autenticado');
          setUser(null);
        }

      } catch (error: any) {
        logger.error('AUTH-RESTORE Erro ao verificar autentica√ß√£o', error?.message || 'Unknown error');
        clearTokens();
        setUser(null);
      } finally {
        setLoading(false);
        console.log('üèÅ [AUTH-RESTORE] Verifica√ß√£o de autentica√ß√£o conclu√≠da');
      }
    };

    // Executar verifica√ß√£o s√≠ncrona para evitar problemas
    checkAuth();
  }, []);

  /**
   * üîß CORRE√á√ÉO ETAPA 1: Login integrado com Backend API para gerar tokens JWT
   */
  const login = async (email: string, password: string): Promise<boolean> => {
    console.log('üîê [ETAPA-1] Tentando login integrado Backend API + JWT:', email);
    setLoading(true);
    
    try {
      // üîß CORRE√á√ÉO: Sempre tentar Backend API primeiro para obter tokens JWT
      console.log('üöÄ [ETAPA-1] Tentando login via Backend API (/api/auth/login)...');
      
      const loginResponse = await fetch(`${API_BASE_URL}/api/auth/login`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          email: email.toLowerCase().trim(),
          password: password
        })
      });

      const loginData = await loginResponse.json();

      if (loginResponse.ok && loginData.success) {
        // ‚úÖ LOGIN VIA BACKEND API SUCESSO - Tokens JWT obtidos
        console.log('‚úÖ [ETAPA-1] Login via Backend API bem-sucedido:', loginData.data.user.email);
        
        const { user, tokens } = loginData.data;

        // Armazenar tokens JWT
        storeTokens(tokens);
        console.log('‚úÖ [ETAPA-1] Tokens JWT armazenados:', { 
          accessToken: tokens.accessToken.substring(0, 50) + '...', 
          expiresIn: tokens.expiresIn 
        });

        // Configurar usu√°rio
        setUser(user);

        // Manter compatibilidade com localStorage para demonstra√ß√£o
        localStorage.setItem('crm_user', JSON.stringify({
          ...user,
          loginTime: new Date().toISOString()
        }));

        console.log('üéâ [ETAPA-1] Login completo via Backend API + JWT tokens!');
        setLoading(false);
        return true;
      }

      // ‚ö†Ô∏è Backend API falhou - tentar fallback de demonstra√ß√£o
      console.log('‚ö†Ô∏è [ETAPA-1] Backend API falhou, tentando fallback demo:', loginData.error || 'Erro desconhecido');

      // FALLBACK: Credenciais de demonstra√ß√£o (para desenvolvimento)
      const demoUsers = [
        {
          email: 'superadmin@crm.com',
          password: 'SuperAdmin123!',
          user: {
            id: '3873c08e-f735-4d2e-9b43-fef337ca9876', // ID real do banco
            email: 'superadmin@crm.com',
            first_name: 'Super',
            last_name: 'Admin',
            role: 'super_admin' as const,
            tenant_id: '550e8400-e29b-41d4-a716-446655440000',
            is_active: true,
            created_at: new Date().toISOString()
          }
        },
        {
          email: 'admin@crm.com',
          password: '123456',
          user: {
            id: '2',
            email: 'admin@crm.com',
            first_name: 'Admin',
            last_name: 'User',
            role: 'admin' as const,
            tenant_id: 'demo',
            is_active: true,
            created_at: new Date().toISOString()
          }
        }
      ];

      const demoUser = demoUsers.find(u => u.email === email && u.password === password);
      
      if (demoUser) {
        console.log('‚úÖ [ETAPA-1] Login demo bem-sucedido (fallback):', demoUser.user.email);
        
        // üîß CORRE√á√ÉO: Gerar tokens demo para que authenticatedFetch funcione
        const demoTokens: AuthTokens = {
          accessToken: `demo_token_${Date.now()}_${demoUser.user.id}`,
          refreshToken: `demo_refresh_${Date.now()}_${demoUser.user.id}`,
          expiresIn: 24 * 60 * 60, // 24 horas para demo
          tokenType: 'Bearer' as const
        };

        // Armazenar tokens demo
        storeTokens(demoTokens);
        console.log('‚úÖ [ETAPA-1] Tokens demo criados para desenvolvimento');

        // Configurar usu√°rio
        setUser(demoUser.user);

        // Salvar no localStorage
        localStorage.setItem('crm_user', JSON.stringify({
          ...demoUser.user,
          loginTime: new Date().toISOString()
        }));

        console.log('‚úÖ [ETAPA-1] Login demo completo com tokens!');
        setLoading(false);
        return true;
      }

      // ‚ùå Todas as tentativas falharam
      console.log('‚ùå [ETAPA-1] Todas as tentativas de login falharam');
          setLoading(false);
          return false;

    } catch (error) {
      console.error('‚ùå [ETAPA-1] Erro no login:', error);
      setLoading(false);
      return false;
    }
  };

  /**
   * Logout
   */
  const logout = async () => {
    console.log('üö™ Fazendo logout...');
    
    try {
      // Limpar dados locais
      clearTokens();
      setUser(null);
      
      console.log('‚úÖ Logout realizado com sucesso');

    } catch (error) {
      console.error('‚ùå Erro ao fazer logout:', error);
      // For√ßar limpeza mesmo com erro
      clearTokens();
      setUser(null);
    }
  };

  // Log removido - muito verboso

  return (
    <AuthContext.Provider value={{ 
      user, 
      login, 
      logout, 
      loading,
      authenticatedFetch,
      refreshTokens
    }}>
      {children}
    </AuthContext.Provider>
  );
};

export default AuthProvider;