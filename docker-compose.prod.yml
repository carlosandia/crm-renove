# CRM Marketing - Docker Compose para Produção Enterprise
# Configuração completa com nginx, redis, monitoring e backup

version: '3.8'

services:
  # ================================
  # Aplicação Principal
  # ================================
  crm-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
      args:
        NODE_ENV: production
        VITE_APP_VERSION: "4.0.0"
        VITE_BUILD_NUMBER: "${BUILD_NUMBER:-$(date +%s)}"
    container_name: crm-marketing-app
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - PORT=3001
      - FRONTEND_PORT=8082
      - LOG_LEVEL=info
      - LOG_DESTINATION=file
      
      # Database (Supabase)
      - VITE_SUPABASE_URL=${SUPABASE_URL}
      - VITE_SUPABASE_ANON_KEY=${SUPABASE_ANON_KEY}
      - VITE_DB_SCHEMA=public
      - VITE_DB_POOL_SIZE=20
      - VITE_DB_TIMEOUT=30000
      - VITE_DB_SSL=true
      
      # Cache
      - VITE_CACHE_ENABLED=true
      - VITE_CACHE_PROVIDER=redis
      - VITE_CACHE_URL=redis://redis:6379
      - VITE_CACHE_TTL=300000
      - VITE_CACHE_MAX_SIZE=1000
      
      # Security
      - VITE_CSP_ENABLED=true
      - VITE_RATE_LIMIT_ENABLED=true
      - VITE_RATE_LIMIT_WINDOW=900000
      - VITE_RATE_LIMIT_MAX=100
      - VITE_CORS_ENABLED=true
      - VITE_CORS_ORIGINS=${CORS_ORIGINS:-https://app.crm-marketing.com}
      - VITE_SECURITY_HSTS=true
      - VITE_SECURITY_NO_SNIFF=true
      - VITE_SECURITY_FRAME_OPTIONS=DENY
      - VITE_SECURITY_XSS_PROTECTION=true
      
      # Monitoring
      - VITE_MONITORING_PERFORMANCE=true
      - VITE_MONITORING_ENDPOINT=/api/performance
      - VITE_MONITORING_SAMPLE_RATE=0.1
      - VITE_HEALTH_CHECKS_ENABLED=true
      - VITE_HEALTH_CHECK_INTERVAL=30000
      - VITE_ANALYTICS_ENABLED=true
      - VITE_ANALYTICS_PROVIDER=google
      - VITE_ANALYTICS_TRACKING_ID=${GA_TRACKING_ID}
      
      # Features
      - VITE_FEATURE_MODERN_COMPONENTS=true
      - VITE_FEATURE_OFFLINE_MODE=true
      - VITE_FEATURE_PUSH_NOTIFICATIONS=true
      - VITE_FEATURE_ADVANCED_ANALYTICS=true
      - VITE_FEATURE_A11Y=true
      - VITE_FEATURE_EXPERIMENTAL=false
      
      # API
      - VITE_API_BASE_URL=/api
      - VITE_API_TIMEOUT=30000
      - VITE_API_RETRIES=3
      - VITE_API_RETRY_DELAY=1000
      
      # CDN
      - VITE_CDN_ENABLED=true
      - VITE_CDN_BASE_URL=${CDN_BASE_URL}
      - VITE_CDN_VERSION=4.0.0
      
      # Service Worker
      - VITE_SW_ENABLED=true
      - VITE_SW_SCOPE=/
      - VITE_SW_UPDATE_INTERVAL=60000
      
    volumes:
      - app-logs:/app/logs
      - app-uploads:/app/uploads
      - app-cache:/app/cache
    networks:
      - crm-network
    depends_on:
      - redis
      - nginx
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.crm-app.rule=Host(`app.crm-marketing.com`)"
      - "traefik.http.routers.crm-app.tls=true"
      - "traefik.http.routers.crm-app.tls.certresolver=letsencrypt"

  # ================================
  # Nginx Load Balancer
  # ================================
  nginx:
    image: nginx:1.25-alpine
    container_name: crm-marketing-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx-cache:/var/cache/nginx
      - nginx-logs:/var/log/nginx
      - ssl-certs:/etc/ssl/certs
    networks:
      - crm-network
    depends_on:
      - crm-app
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ================================
  # Redis Cache
  # ================================
  redis:
    image: redis:7-alpine
    container_name: crm-marketing-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    volumes:
      - redis-data:/data
    networks:
      - crm-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

  # ================================
  # Prometheus Monitoring
  # ================================
  prometheus:
    image: prom/prometheus:latest
    container_name: crm-marketing-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - crm-network
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.25'
          memory: 256M

  # ================================
  # Grafana Dashboard
  # ================================
  grafana:
    image: grafana/grafana:latest
    container_name: crm-marketing-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    networks:
      - crm-network
    depends_on:
      - prometheus
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 128M

  # ================================
  # Node Exporter (Métricas do Sistema)
  # ================================
  node-exporter:
    image: prom/node-exporter:latest
    container_name: crm-marketing-node-exporter
    restart: unless-stopped
    command:
      - '--path.procfs=/host/proc'
      - '--path.rootfs=/rootfs'
      - '--path.sysfs=/host/sys'
      - '--collector.filesystem.mount-points-exclude=^/(sys|proc|dev|host|etc)($$|/)'
    volumes:
      - /proc:/host/proc:ro
      - /sys:/host/sys:ro
      - /:/rootfs:ro
    ports:
      - "9100:9100"
    networks:
      - crm-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 128M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ================================
  # Backup Service
  # ================================
  backup:
    image: alpine:latest
    container_name: crm-marketing-backup
    restart: unless-stopped
    environment:
      - BACKUP_SCHEDULE=${BACKUP_SCHEDULE:-0 2 * * *}
      - BACKUP_RETENTION_DAYS=${BACKUP_RETENTION_DAYS:-30}
      - S3_BUCKET=${S3_BACKUP_BUCKET}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    volumes:
      - app-logs:/backup/logs:ro
      - app-uploads:/backup/uploads:ro
      - ./scripts/backup.sh:/usr/local/bin/backup.sh:ro
    command: |
      sh -c "
        apk add --no-cache aws-cli curl dcron &&
        echo '$${BACKUP_SCHEDULE} /usr/local/bin/backup.sh' | crontab - &&
        crond -f
      "
    networks:
      - crm-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 256M
        reservations:
          cpus: '0.1'
          memory: 64M

  # ================================
  # Log Aggregator (Fluentd)
  # ================================
  fluentd:
    image: fluent/fluentd:v1.16-debian-1
    container_name: crm-marketing-fluentd
    restart: unless-stopped
    environment:
      - FLUENTD_CONF=fluent.conf
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - app-logs:/var/log/app:ro
      - nginx-logs:/var/log/nginx:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - crm-network
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M
        reservations:
          cpus: '0.1'
          memory: 128M

# ================================
# Networks
# ================================
networks:
  crm-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ================================
# Volumes
# ================================
volumes:
  # Aplicação
  app-logs:
    driver: local
  app-uploads:
    driver: local
  app-cache:
    driver: local
  
  # Nginx
  nginx-cache:
    driver: local
  nginx-logs:
    driver: local
  ssl-certs:
    driver: local
  
  # Redis
  redis-data:
    driver: local
  
  # Monitoring
  prometheus-data:
    driver: local
  grafana-data:
    driver: local

# ================================
# Configurações Adicionais
# ================================
x-logging: &default-logging
  driver: "fluentd"
  options:
    fluentd-address: localhost:24224
    tag: "docker.{{.Name}}"

# Aplicar logging a todos os serviços
x-common-variables: &common-variables
  logging: *default-logging 