// CRITICAL: Load environment variables FIRST, before any other imports
import dotenv from 'dotenv';
dotenv.config();

import express from "express";
import cors from 'cors';
import helmet from 'helmet';
import morgan from 'morgan';
import { createServer } from 'http';
import compression from 'compression';
import rateLimit from 'express-rate-limit';
import { createClient } from '@supabase/supabase-js';

// FASE 1: Performance Monitoring (Cache removed)
import { performanceMiddleware } from './services/performanceService';

// Importar rotas
import authRoutes from './routes/auth';
import usersRoutes from './routes/users';
import customersRoutes from './routes/customers';
import pipelinesRoutes from './routes/pipelines';
import vendedoresRoutes from './routes/vendedores';
import salesGoalsRoutes from './routes/sales-goals';
import integrationsRoutes from './routes/integrations';
import integrationsSecureRoutes from './routes/integrations-secure';
import conversionsRoutes from './routes/conversions';
import companiesRoutes from './routes/companies';
import databaseRoutes from './routes/database';
import healthRoutes from './routes/health';
import setupRoutes from './routes/setup';
import mcpRoutes from './routes/mcp';
import analyticsRoutes from './routes/analytics';
import formsRoutes from './routes/forms';
import leadTasksRoutes from './routes/leadTasks';
import cadenceRoutes from './routes/cadence';
import notificationsRoutes from './routes/notifications';
import adminRoutes from './routes/admin';
import emailRoutes from './routes/email';
import emailTestRoutes from './routes/emailTest';
import adminInvitationsRoutes from './routes/adminInvitations';// import modernLeadsRoutes from './routes/modernLeads'; // Removed - not needed for Phase 2

// Middleware de autenticação
import { authMiddleware } from './middleware/auth';
import { errorHandler } from './middleware/errorHandler';
import { validateRequest } from './middleware/validation';
import { rateLimiter } from './middleware/rateLimiter';

// Import new automation routes
import automationRoutes from './routes/automation';

// FASE 4A: Admin Dashboard Routes
import adminDashboardRoutes from './routes/adminDashboard';

// FASE 4: Form Builder Evolution - Backend Endpoints
import formEmbedRoutes from './routes/formEmbed';
import formAnalyticsRoutes from './routes/formAnalytics';

// FASE 4B: Member Tools Routes
import { memberToolsRoutes } from './routes/memberTools';

// Platform Integrations Routes (Enterprise Architecture)
import platformIntegrationsRoutes from './routes/platformIntegrations';

// Import services  
import { performanceService } from './services/performanceService';
import { rulesEngine } from './services/rulesEngine';
import { eventService } from './services/eventService';

const app = express();
const PORT = process.env.PORT || 3001;

// ============================================
// FASE 1: INITIALIZE PERFORMANCE MONITORING
// ============================================

console.log('ℹ️  Running without cache (simplified for development)');

// Initialize Performance Monitoring
app.use(performanceMiddleware());
console.log('✅ Performance monitoring initialized');

// ============================================
// CONFIGURAÇÕES DE SEGURANÇA
// ============================================

// Helmet para headers de segurança (SEM sobrescrever CORS)
app.use(helmet({
  contentSecurityPolicy: {
    directives: {
      defaultSrc: ["'self'"],
      styleSrc: ["'self'", "'unsafe-inline'", "https://fonts.googleapis.com"],
      fontSrc: ["'self'", "https://fonts.gstatic.com"],
      imgSrc: ["'self'", "data:", "https:"],
      scriptSrc: ["'self'"],
      connectSrc: ["'self'", "https://*.supabase.co", "wss://*.supabase.co"]
    }
  },
  crossOriginResourcePolicy: false, // Desabilitar para evitar conflito com CORS
  crossOriginOpenerPolicy: false   // Desabilitar para evitar conflito com CORS
}));

// CORS manual - configuração específica que permite Cache-Control

// Rate limiting
const limiter = rateLimit({
  windowMs: 15 * 60 * 1000, // 15 minutes
  max: 1000, // limit each IP to 1000 requests per windowMs
  message: 'Too many requests from this IP, please try again later.',
  standardHeaders: true,
  legacyHeaders: false,
});
app.use(limiter);

// Logging de requests
app.use(morgan('combined', {
  skip: (req, res) => res.statusCode < 400 // Log apenas erros em produção
}));

// Parse JSON com limite de tamanho
app.use(express.json({ 
  limit: '10mb',
  verify: (req, res, buf) => {
    // Verificar integridade do JSON
    try {
      JSON.parse(buf.toString());
    } catch (e) {
      throw new Error('JSON inválido');
    }
  }
}));

// Parse URL encoded
app.use(express.urlencoded({ extended: true, limit: '10mb' }));

// ============================================
// MIDDLEWARE CUSTOMIZADO
// ============================================

// Middleware para forçar headers CORS corretos
app.use((req, res, next) => {
  const origin = req.headers.origin;
  const allowedOrigins = [
    'http://localhost:8080',
    'http://127.0.0.1:8080', 
    'http://localhost:3000',
    'http://127.0.0.1:3000',
    'http://localhost:5173',
    'http://127.0.0.1:5173'
  ];

  // Definir headers CORS corretos
  if (!origin || allowedOrigins.includes(origin)) {
    res.header('Access-Control-Allow-Origin', origin || '*');
  }
  
  res.header('Access-Control-Allow-Credentials', 'true');
  res.header('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS, PATCH, HEAD');
  
  // FORÇA os headers permitidos corretos
  res.header('Access-Control-Allow-Headers', 
    'Content-Type, Authorization, X-Requested-With, Accept, Origin, X-User-ID, X-User-Role, X-Tenant-ID, Cache-Control, Pragma, X-Cache-Control, If-None-Match, If-Modified-Since'
  );
  
  res.header('Access-Control-Max-Age', '86400');

  if (req.method === 'OPTIONS') {
    console.log(`✅ [CORS] Preflight OPTIONS para ${req.path} - Origin: ${origin}`);
    console.log(`✅ [CORS] Headers permitidos: Content-Type, Authorization, Cache-Control, etc.`);
    res.status(200).end();
    return;
  }
  
  next();
});

// Adicionar timestamp a todas as requests
app.use((req, res, next) => {
  req.requestTime = new Date().toISOString();
  next();
});

// Health check básico (sem autenticação)
app.use('/health', healthRoutes);

// FASE 1: Performance Monitoring Endpoints
app.get('/api/performance/metrics', async (req, res) => {
  try {
    const summary = performanceService.getPerformanceSummary();
    const trends = performanceService.getPerformanceTrends();
    const health = performanceService.getHealthStatus();
    
    res.json({
      summary,
      trends,
      health,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    const err = error as Error;
    res.status(500).json({
      error: 'Failed to get performance metrics',
      details: err.message
    });
  }
});

app.get('/api/performance/health', async (req, res) => {
  try {
    const health = performanceService.getHealthStatus();
    const statusCode = health.status === 'healthy' ? 200 : 
                      health.status === 'warning' ? 200 : 503;
    
    res.status(statusCode).json(health);
  } catch (error) {
    const err = error as Error;
    res.status(503).json({
      status: 'critical',
      score: 0,
      error: err.message
    });
  }
});

// Cache Health Check Endpoint
app.get('/api/cache/health', async (req, res) => {
  try {
    // Always healthy without cache dependency

    const healthStatus = { status: 'healthy', message: 'No cache dependency' };
    const statusCode = 200;
    
    res.status(statusCode).json({
      ...healthStatus,
      timestamp: new Date().toISOString()
    });
  } catch (error) {
    const err = error as Error;
    res.status(503).json({
      status: 'unhealthy',
      error: err.message,
      timestamp: new Date().toISOString()
    });
  }
});

// API Info
app.get('/api', (req, res) => {
  res.json({
    name: 'CRM Marketing API',
    version: '1.0.0',
    status: 'running',
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV || 'development'
  });
});

// ============================================
// ROTAS PÚBLICAS (SEM AUTENTICAÇÃO)
// ============================================

// Rotas de autenticação (login, registro)
app.use('/api/auth', authRoutes);

// Setup inicial do sistema
app.use('/api/setup', setupRoutes);

// Teste de cadência (sem autenticação para debug)
app.post('/api/cadence/test-public', async (req, res) => {
  try {
    res.json({
      message: 'API de cadência funcionando',
      status: 'OK',
      timestamp: new Date().toISOString()
    });
  } catch (error: any) {
    res.status(500).json({
      error: error.message || 'Erro no teste'
    });
  }
});

// Webhooks (com autenticação própria)
app.use('/api/webhooks', integrationsRoutes);

// Admin Invitations (Sistema simplificado - SEM autenticação)
app.use('/api/admin-invitations', adminInvitationsRoutes);

// ============================================
// MIDDLEWARE DE AUTENTICAÇÃO
// ============================================

// Aplicar autenticação para todas as rotas /api/* (exceto as acima)
app.use('/api', authMiddleware);

// ============================================
// ROTAS PROTEGIDAS (COM AUTENTICAÇÃO)
// ============================================

// Gestão de usuários
app.use('/api/users', usersRoutes);
app.use('/api/vendedores', vendedoresRoutes);

// Members/Vendedores Enterprise (Backend API)
import membersRoutes from './routes/members';
app.use('/api/members', membersRoutes);

// CRM Core
app.use('/api/customers', customersRoutes);
app.use('/api/pipelines', pipelinesRoutes);
// app.use('/api/leads', leadsRoutes); // TODO: Implementar quando estiver pronto

// API V2 - Leads Modernos (com visão gerencial)
// app.use('/api/v2/leads', modernLeadsRoutes); // Removed - not needed for Phase 2

app.use('/api/sales-goals', salesGoalsRoutes);

// Formulários
app.use('/api/forms', formsRoutes);

// FASE 4: Form Builder Evolution - Sistema de Embed
app.use('/api/embed', formEmbedRoutes);
app.use('/api/form-analytics', formAnalyticsRoutes);

// Tarefas de Leads
app.use('/api/lead-tasks', leadTasksRoutes);

// Cadência de Leads
app.use('/api/cadence', cadenceRoutes);

// Notificações
app.use('/api/notifications', notificationsRoutes);

// E-mail pessoal
app.use('/api/email', emailRoutes);

// Teste de email (Mailtrap)
app.use('/api/email-test', emailTestRoutes);
// Integrações
app.use('/api/integrations', integrationsSecureRoutes);

// Analytics
app.use('/api/analytics', analyticsRoutes);

// Conversões
app.use('/api/conversions', conversionsRoutes);

// Empresas
app.use('/api/companies', companiesRoutes);

// Database utilities
app.use('/api/database', databaseRoutes);

// MCP Services
app.use('/api/mcp', mcpRoutes);

// Supabase Admin API
app.use('/api/admin', adminRoutes);

// FASE 4A: Admin Dashboard & Sales Management
app.use('/api/admin-dashboard', adminDashboardRoutes);

// FASE 4B: Member Tools & Integrations
app.use('/api/member-tools', memberToolsRoutes);

// Platform Integrations (Enterprise Architecture)
app.use('/api/platform-integrations', platformIntegrationsRoutes);

// ============================================
// TRATAMENTO DE ERROS
// ============================================

// Middleware de tratamento de erro
app.use(errorHandler);

// 404 handler
app.use('*', (req, res) => {
  res.status(404).json({
    success: false,
    error: 'Rota não encontrada',
    path: req.originalUrl,
    method: req.method,
    timestamp: new Date().toISOString()
  });
});

// ============================================
// INICIALIZAÇÃO DO SERVIDOR
// ============================================

const server = createServer(app);

// Tratamento de erros não capturados
process.on('uncaughtException', (error) => {
  console.error('🚨 Erro não capturado:', error);
  process.exit(1);
});

process.on('unhandledRejection', (reason, promise) => {
  console.error('🚨 Promise rejeitada não tratada:', reason);
  process.exit(1);
});

// Graceful shutdown
process.on('SIGTERM', () => {
  console.log('🛑 SIGTERM recebido. Fechando servidor...');
  server.close(() => {
    console.log('✅ Servidor fechado com sucesso');
    process.exit(0);
  });
});

// Initialize services
async function initializeServices() {
  try {
    console.log('🚀 Initializing services...');
    
    // Cache service removed (simplified)
    
    // Performance service is already initialized as singleton
    console.log('✅ Performance service initialized');
    
    // Initialize automation services
    console.log('✅ Rules engine initialized');
    console.log('✅ Event service initialized');
    
    // Set up event listeners for automation
    eventService.on('*', async (event: any) => {
      try {
        console.log(`📨 Event received: ${event.type} for ${event.entityType}:${event.entityId}`);
        
        // Process event through rules engine
        await rulesEngine.processEvent(event);
      } catch (error) {
        console.error('Error processing event:', error);
      }
    });
    
    rulesEngine.on('ruleExecuted', ({ rule, event, execution }: any) => {
      console.log(`✅ Rule executed: ${rule.name} for event ${event.type} in ${execution.executionTime}ms`);
    });
    
    rulesEngine.on('ruleExecutionFailed', ({ rule, event, execution, error }: any) => {
      console.error(`❌ Rule execution failed: ${rule.name} for event ${event.type} - ${error.message}`);
    });
    
    console.log('✅ All services initialized successfully');
  } catch (error) {
    const err = error as Error;
    console.error('❌ Service initialization failed:', err.message);
    throw error;
  }
}

// Start server
async function startServer() {
  try {
    // Initialize all services first
    await initializeServices();
    
    // Start the server (bind to all interfaces)
    server.listen(PORT, () => {
      console.log(`🌟 CRM Marketing API Server running on port ${PORT}`);
      console.log(`🔗 Health check: http://127.0.0.1:${PORT}/health`);
      console.log(`🔗 API docs: http://127.0.0.1:${PORT}/api`);
      console.log(`🎯 Automation API: http://127.0.0.1:${PORT}/api/automation`);
      console.log(`📊 System health: http://127.0.0.1:${PORT}/api/system/health`);
      console.log(`🚀 Environment: ${process.env.NODE_ENV || 'development'}`);
      console.log(`📈 Performance monitoring: ENABLED`);
      console.log(`🔄 Cache system: DISABLED (simplified)`);
      console.log(`⚡ Automation system: ENABLED`);
      console.log('');
      console.log('🎉 FASE 2: Workflow Automation System is LIVE!');
      console.log('');
    });
  } catch (error) {
    console.error('❌ Failed to start server:', error);
    process.exit(1);
  }
}

// Start the server
startServer();

export default app;
